<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/undefined/"/>
    <url>/posts/undefined/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Scoop,winget等的配置</title>
    <link href="/posts/f8ec0409/"/>
    <url>/posts/f8ec0409/</url>
    
    <content type="html"><![CDATA[<h1 id="Winget"><a href="#Winget" class="headerlink" title="Winget"></a>Winget</h1><p><code>winget settings</code>可以打开设置json文件。其中与安装有关的部分如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>...<span class="token property">"installBehavior"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"defaultInstallRoot"</span><span class="token operator">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span>        <span class="token property">"portablePackageUserRoot"</span><span class="token operator">:</span> <span class="token string">"..."</span><span class="token punctuation">,</span>        <span class="token property">"portablePackageMachineRoot"</span><span class="token operator">:</span> <span class="token string">"..."</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    ...<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>第1个是默认的安装路径，但我自己用下来不太实用，还不如用<code>-i</code>参数图形化安装。<br>第2个和第3个参数有用，安装一些直接运行的软件（如wget）时就会用这个参数。</p><h1 id="Scoop"><a href="#Scoop" class="headerlink" title="Scoop"></a>Scoop</h1><p>Scoop 修改其根目录，只需要新建系统级环境变量 <code>SCOOP</code>，之后再用脚本安装即可。</p><details><summary>ps1脚本内容如下：</summary><figure><div class="code-wrapper"><pre class="line-numbers language-ps1" data-language="ps1"><code class="language-ps1"># Issue Tracker: https://github.com/ScoopInstaller/Install/issues# Unlicense License:## This is free and unencumbered software released into the public domain.## Anyone is free to copy, modify, publish, use, compile, sell, or# distribute this software, either in source code form or as a compiled# binary, for any purpose, commercial or non-commercial, and by any# means.## In jurisdictions that recognize copyright laws, the author or authors# of this software dedicate any and all copyright interest in the# software to the public domain. We make this dedication for the benefit# of the public at large and to the detriment of our heirs and# successors. We intend this dedication to be an overt act of# relinquishment in perpetuity of all present and future rights to this# software under copyright law.## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR# OTHER DEALINGS IN THE SOFTWARE.## For more information, please refer to <http://unlicense.org/><p>&lt;#<br>.SYNOPSIS<br>    Scoop installer.<br>.DESCRIPTION<br>    The installer of Scoop. For details please check the website and wiki.<br>.PARAMETER ScoopDir<br>    Specifies Scoop root path.<br>    If not specified, Scoop will be installed to ‘$env:USERPROFILE\scoop’.<br>.PARAMETER ScoopGlobalDir<br>    Specifies directory to store global apps.<br>    If not specified, global apps will be installed to ‘$env:ProgramData\scoop’.<br>.PARAMETER ScoopCacheDir<br>    Specifies cache directory.<br>    If not specified, caches will be downloaded to ‘$ScoopDir\cache’.<br>.PARAMETER NoProxy<br>    Bypass system proxy during the installation.<br>.PARAMETER Proxy<br>    Specifies proxy to use during the installation.<br>.PARAMETER ProxyCredential<br>    Specifies credential for the given proxy.<br>.PARAMETER ProxyUseDefaultCredentials<br>    Use the credentials of the current user for the proxy server that is specified by the -Proxy parameter.<br>.PARAMETER RunAsAdmin<br>    Force to run the installer as administrator.<br>.LINK<br>    <a href="https://scoop.sh/">https://scoop.sh</a><br>.LINK<br>    <a href="https://github.com/ScoopInstaller/Scoop/wiki">https://github.com/ScoopInstaller/Scoop/wiki</a><br>#&gt;<br>param(<br>    [String] $ScoopDir,<br>    [String] $ScoopGlobalDir,<br>    [String] $ScoopCacheDir,<br>    [Switch] $NoProxy,<br>    [Uri] $Proxy,<br>    [System.Management.Automation.PSCredential] $ProxyCredential,<br>    [Switch] $ProxyUseDefaultCredentials,<br>    [Switch] $RunAsAdmin<br>)</p><h1 id="Disable-StrictMode-in-this-script"><a href="#Disable-StrictMode-in-this-script" class="headerlink" title="Disable StrictMode in this script"></a>Disable StrictMode in this script</h1><p>Set-StrictMode -Off</p><p>function Write-InstallInfo {<br>    param(<br>        [Parameter(Mandatory &#x3D; $True, Position &#x3D; 0)]<br>        [String] $String,<br>        [Parameter(Mandatory &#x3D; $False, Position &#x3D; 1)]<br>        [System.ConsoleColor] $ForegroundColor &#x3D; $host.UI.RawUI.ForegroundColor<br>    )</p><pre class="language-none"><code class="language-none">$backup = $host.UI.RawUI.ForegroundColorif ($ForegroundColor -ne $host.UI.RawUI.ForegroundColor) {    $host.UI.RawUI.ForegroundColor = $ForegroundColor}Write-Output &quot;$String&quot;$host.UI.RawUI.ForegroundColor = $backup</code></pre></div></figure><p>}</p><p>function Deny-Install {<br>    param(<br>        [String] $message,<br>        [Int] $errorCode &#x3D; 1<br>    )</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">Write-InstallInfo -String $message -ForegroundColor DarkRedWrite-InstallInfo &#39;Abort.&#39;# Don&#39;t abort if invoked with iex that would close the PS sessionif ($IS_EXECUTED_FROM_IEX) {    break} else {    exit $errorCode}</code></pre></div></figure><p>}</p><p>function Test-LanguageMode {<br>    if ($ExecutionContext.SessionState.LanguageMode -ne ‘FullLanguage’) {<br>        Write-Output ‘Scoop requires PowerShell FullLanguage mode to run, current PowerShell environment is restricted.’<br>        Write-Output ‘Abort.’</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">    if ($IS_EXECUTED_FROM_IEX) {        break    } else {        exit $errorCode    }}</code></pre></div></figure><p>}</p><p>function Test-ValidateParameter {<br>    if ($null -eq $Proxy -and ($null -ne $ProxyCredential -or $ProxyUseDefaultCredentials)) {<br>        Deny-Install ‘Provide a valid proxy URI for the -Proxy parameter when using the -ProxyCredential or -ProxyUseDefaultCredentials.’<br>    }</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">if ($ProxyUseDefaultCredentials -and $null -ne $ProxyCredential) {    Deny-Install &quot;ProxyUseDefaultCredentials is conflict with ProxyCredential. Don&#39;t use the -ProxyCredential and -ProxyUseDefaultCredentials together.&quot;}</code></pre></div></figure><p>}</p><p>function Test-IsAdministrator {<br>    return ([Security.Principal.WindowsPrincipal]<code>             [Security.Principal.WindowsIdentity]::GetCurrent()</code><br>    ).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)<br>}</p><p>function Test-Prerequisite {<br>    # Scoop requires PowerShell 5 at least<br>    if (($PSVersionTable.PSVersion.Major) -lt 5) {<br>        Deny-Install ‘PowerShell 5 or later is required to run Scoop. Go to <a href="https://microsoft.com/powershell">https://microsoft.com/powershell</a> to get the latest version of PowerShell.’<br>    }</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none"># Scoop requires TLS 1.2 SecurityProtocol, which exists in .NET Framework 4.5+if ([System.Enum]::GetNames([System.Net.SecurityProtocolType]) -notcontains &#39;Tls12&#39;) {    Deny-Install &#39;Scoop requires .NET Framework 4.5+ to work. Go to https://microsoft.com/net/download to get the latest version of .NET Framework.&#39;}# Ensure Robocopy.exe is accessibleif (!(Test-CommandAvailable(&#39;robocopy&#39;))) {    Deny-Install &quot;Scoop requires &#39;C:\Windows\System32\Robocopy.exe&#39; to work. Please make sure &#39;C:\Windows\System32&#39; is in your PATH.&quot;}# Detect if RunAsAdministrator, there is no need to run as administrator when installing Scoopif (!$RunAsAdmin -and (Test-IsAdministrator)) {    # Exception: Windows Sandbox, GitHub Actions CI    $exception = ($env:USERNAME -eq &#39;WDAGUtilityAccount&#39;) -or ($env:GITHUB_ACTIONS -eq &#39;true&#39; -and $env:CI -eq &#39;true&#39;)    if (!$exception) {        Deny-Install &#39;Running the installer as administrator is disabled by default, see https://github.com/ScoopInstaller/Install#for-admin for details.&#39;    }}# Show notification to change execution policy$allowedExecutionPolicy = @(&#39;Unrestricted&#39;, &#39;RemoteSigned&#39;, &#39;ByPass&#39;)if ((Get-ExecutionPolicy).ToString() -notin $allowedExecutionPolicy) {    Deny-Install &quot;PowerShell requires an execution policy in [$($allowedExecutionPolicy -join &#39;, &#39;)] to run Scoop. For example, to set the execution policy to &#39;RemoteSigned&#39; please run &#39;Set-ExecutionPolicy RemoteSigned -Scope CurrentUser&#39;.&quot;}# Test if scoop is installed, by checking if scoop command exists.if (Test-CommandAvailable(&#39;scoop&#39;)) {    Deny-Install &quot;Scoop is already installed. Run &#39;scoop update&#39; to get the latest version.&quot;}</code></pre></div></figure><p>}</p><p>function Optimize-SecurityProtocol {<br>    # .NET Framework 4.7+ has a default security protocol called ‘SystemDefault’,<br>    # which allows the operating system to choose the best protocol to use.<br>    # If SecurityProtocolType contains ‘SystemDefault’ (means .NET4.7+ detected)<br>    # and the value of SecurityProtocol is ‘SystemDefault’, just do nothing on SecurityProtocol,<br>    # ‘SystemDefault’ will use TLS 1.2 if the webrequest requires.<br>    $isNewerNetFramework &#x3D; ([System.Enum]::GetNames([System.Net.SecurityProtocolType]) -contains ‘SystemDefault’)<br>    $isSystemDefault &#x3D; ([System.Net.ServicePointManager]::SecurityProtocol.Equals([System.Net.SecurityProtocolType]::SystemDefault))</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none"># If not, change it to support TLS 1.2if (!($isNewerNetFramework -and $isSystemDefault)) {    # Set to TLS 1.2 (3072), then TLS 1.1 (768), and TLS 1.0 (192). Ssl3 has been superseded,    # https://docs.microsoft.com/en-us/dotnet/api/system.net.securityprotocoltype?view=netframework-4.5    [System.Net.ServicePointManager]::SecurityProtocol = 3072 -bor 768 -bor 192    Write-Verbose &#39;SecurityProtocol has been updated to support TLS 1.2&#39;}</code></pre></div></figure><p>}</p><p>function Get-Downloader {<br>    $downloadSession &#x3D; New-Object System.Net.WebClient</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none"># Set proxy to null if NoProxy is specificedif ($NoProxy) {    $downloadSession.Proxy = $null} elseif ($Proxy) {    # Prepend protocol if not provided    if (!$Proxy.IsAbsoluteUri) {        $Proxy = New-Object System.Uri(&#39;http://&#39; + $Proxy.OriginalString)    }    $Proxy = New-Object System.Net.WebProxy($Proxy)    if ($null -ne $ProxyCredential) {        $Proxy.Credentials = $ProxyCredential.GetNetworkCredential()    } elseif ($ProxyUseDefaultCredentials) {        $Proxy.UseDefaultCredentials = $true    }    $downloadSession.Proxy = $Proxy}return $downloadSession</code></pre></div></figure><p>}</p><p>function Test-isFileLocked {<br>    param(<br>        [String] $path<br>    )</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">$file = New-Object System.IO.FileInfo $pathif (!(Test-Path $path)) {    return $false}try {    $stream = $file.Open(        [System.IO.FileMode]::Open,        [System.IO.FileAccess]::ReadWrite,        [System.IO.FileShare]::None    )    if ($stream) {        $stream.Close()    }    return $false} catch {    # The file is locked by a process.    return $true}</code></pre></div></figure><p>}</p><p>function Expand-ZipArchive {<br>    param(<br>        [String] $path,<br>        [String] $to<br>    )</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">if (!(Test-Path $path)) {    Deny-Install &quot;Unzip failed: can&#39;t find $path to unzip.&quot;}# Check if the zip file is locked, by antivirus software for example$retries = 0while ($retries -le 10) {    if ($retries -eq 10) {        Deny-Install &quot;Unzip failed: can&#39;t unzip because a process is locking the file.&quot;    }    if (Test-isFileLocked $path) {        Write-InstallInfo &quot;Waiting for $path to be unlocked by another process... ($retries/10)&quot;        $retries++        Start-Sleep -Seconds 2    } else {        break    }}# Workaround to suspend Expand-Archive verbose output,# upstream issue: https://github.com/PowerShell/Microsoft.PowerShell.Archive/issues/98$oldVerbosePreference = $VerbosePreference$global:VerbosePreference = &#39;SilentlyContinue&#39;# Disable progress bar to gain performance$oldProgressPreference = $ProgressPreference$global:ProgressPreference = &#39;SilentlyContinue&#39;# PowerShell 5+: use Expand-Archive to extract zip filesMicrosoft.PowerShell.Archive\Expand-Archive -Path $path -DestinationPath $to -Force$global:VerbosePreference = $oldVerbosePreference$global:ProgressPreference = $oldProgressPreference</code></pre></div></figure><p>}</p><p>function Out-UTF8File {<br>    param(<br>        [Parameter(Mandatory &#x3D; $True, Position &#x3D; 0)]<br>        [Alias(‘Path’)]<br>        [String] $FilePath,<br>        [Switch] $Append,<br>        [Switch] $NoNewLine,<br>        [Parameter(ValueFromPipeline &#x3D; $True)]<br>        [PSObject] $InputObject<br>    )<br>    process {<br>        if ($Append) {<br>            [System.IO.File]::AppendAllText($FilePath, $InputObject)<br>        } else {<br>            if (!$NoNewLine) {<br>                # Ref: <a href="https://stackoverflow.com/questions/5596982">https://stackoverflow.com/questions/5596982</a><br>                # Performance Note: <code>WriteAllLines</code> throttles memory usage while<br>                # <code>WriteAllText</code> needs to keep the complete string in memory.<br>                [System.IO.File]::WriteAllLines($FilePath, $InputObject)<br>            } else {<br>                # However <code>WriteAllText</code> does not add ending newline.<br>                [System.IO.File]::WriteAllText($FilePath, $InputObject)<br>            }<br>        }<br>    }<br>}</p><p>function Import-ScoopShim {<br>    Write-InstallInfo ‘Creating shim…’<br>    # The scoop executable<br>    $path &#x3D; “$SCOOP_APP_DIR\bin\scoop.ps1”</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">if (!(Test-Path $SCOOP_SHIMS_DIR)) {    New-Item -Type Directory $SCOOP_SHIMS_DIR | Out-Null}# The scoop shim$shim = &quot;$SCOOP_SHIMS_DIR\scoop&quot;# Convert to relative pathPush-Location $SCOOP_SHIMS_DIR$relativePath = Resolve-Path -Relative $pathPop-Location$absolutePath = Resolve-Path $path# if $path points to another drive resolve-path prepends .\ which could break shims$ps1text = if ($relativePath -match &#39;^(\.\\)?\w:.*$&#39;) {    @(        &quot;# $absolutePath&quot;,        &quot;`$path = `&quot;$path`&quot;&quot;,        &quot;if (`$MyInvocation.ExpectingInput) { `$input | &amp; `$path $arg @args } else { &amp; `$path $arg @args }&quot;,        &quot;exit `$LASTEXITCODE&quot;    )} else {    @(        &quot;# $absolutePath&quot;,        &quot;`$path = Join-Path `$PSScriptRoot `&quot;$relativePath`&quot;&quot;,        &quot;if (`$MyInvocation.ExpectingInput) { `$input | &amp; `$path $arg @args } else { &amp; `$path $arg @args }&quot;,        &quot;exit `$LASTEXITCODE&quot;    )}$ps1text -join &quot;`r`n&quot; | Out-UTF8File &quot;$shim.ps1&quot;# make ps1 accessible from cmd.exe@(    &quot;@rem $absolutePath&quot;,    &#39;@echo off&#39;,    &#39;setlocal enabledelayedexpansion&#39;,    &#39;set args=%*&#39;,    &#39;:: replace problem characters in arguments&#39;,    &quot;set args=%args:`&quot;=&#39;%&quot;,    &quot;set args=%args:(=``(%&quot;,    &quot;set args=%args:)=``)%&quot;,    &quot;set invalid=`&quot;=&#39;&quot;,    &#39;if !args! == !invalid! ( set args= )&#39;,    &#39;where /q pwsh.exe&#39;,    &#39;if %errorlevel% equ 0 (&#39;,    &quot;    pwsh -noprofile -ex unrestricted -file `&quot;$absolutePath`&quot; $arg %args%&quot;,    &#39;) else (&#39;,    &quot;    powershell -noprofile -ex unrestricted -file `&quot;$absolutePath`&quot; $arg %args%&quot;,    &#39;)&#39;) -join &quot;`r`n&quot; | Out-UTF8File &quot;$shim.cmd&quot;@(    &#39;#!/bin/sh&#39;,    &quot;# $absolutePath&quot;,    &#39;if command -v pwsh.exe &gt; /dev/null 2&gt;&amp;1; then&#39;,    &quot;    pwsh.exe -noprofile -ex unrestricted -file `&quot;$absolutePath`&quot; $arg `&quot;$@`&quot;&quot;,    &#39;else&#39;,    &quot;    powershell.exe -noprofile -ex unrestricted -file `&quot;$absolutePath`&quot; $arg `&quot;$@`&quot;&quot;,    &#39;fi&#39;) -join &quot;`n&quot; | Out-UTF8File $shim -NoNewLine</code></pre></div></figure><p>}</p><p>function Get-Env {<br>    param(<br>        [String] $name,<br>        [Switch] $global<br>    )</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">$RegisterKey = if ($global) {    Get-Item -Path &#39;HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager&#39;} else {    Get-Item -Path &#39;HKCU:&#39;}$EnvRegisterKey = $RegisterKey.OpenSubKey(&#39;Environment&#39;)$RegistryValueOption = [Microsoft.Win32.RegistryValueOptions]::DoNotExpandEnvironmentNames$EnvRegisterKey.GetValue($name, $null, $RegistryValueOption)</code></pre></div></figure><p>}</p><p>function Publish-Env {<br>    if (-not (‘Win32.NativeMethods’ -as [Type])) {<br>        Add-Type -Namespace Win32 -Name NativeMethods -MemberDefinition @’<br>[DllImport(“user32.dll”, SetLastError &#x3D; true, CharSet &#x3D; CharSet.Auto)]<br>public static extern IntPtr SendMessageTimeout(<br>    IntPtr hWnd, uint Msg, UIntPtr wParam, string lParam,<br>    uint fuFlags, uint uTimeout, out UIntPtr lpdwResult);<br>‘@<br>    }</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">$HWND_BROADCAST = [IntPtr] 0xffff$WM_SETTINGCHANGE = 0x1a$result = [UIntPtr]::Zero[Win32.Nativemethods]::SendMessageTimeout($HWND_BROADCAST,    $WM_SETTINGCHANGE,    [UIntPtr]::Zero,    &#39;Environment&#39;,    2,    5000,    [ref] $result) | Out-Null</code></pre></div></figure><p>}</p><p>function Write-Env {<br>    param(<br>        [String] $name,<br>        [String] $val,<br>        [Switch] $global<br>    )</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">$RegisterKey = if ($global) {    Get-Item -Path &#39;HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager&#39;} else {    Get-Item -Path &#39;HKCU:&#39;}$EnvRegisterKey = $RegisterKey.OpenSubKey(&#39;Environment&#39;, $true)if ($val -eq $null) {    $EnvRegisterKey.DeleteValue($name)} else {    $RegistryValueKind = if ($val.Contains(&#39;%&#39;)) {        [Microsoft.Win32.RegistryValueKind]::ExpandString    } elseif ($EnvRegisterKey.GetValue($name)) {        $EnvRegisterKey.GetValueKind($name)    } else {        [Microsoft.Win32.RegistryValueKind]::String    }    $EnvRegisterKey.SetValue($name, $val, $RegistryValueKind)}Publish-Env</code></pre></div></figure><p>}</p><p>function Add-ShimsDirToPath {<br>    # Get $env:PATH of current user<br>    $userEnvPath &#x3D; Get-Env ‘PATH’</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">if ($userEnvPath -notmatch [Regex]::Escape($SCOOP_SHIMS_DIR)) {    $h = (Get-PSProvider &#39;FileSystem&#39;).Home    if (!$h.EndsWith(&#39;\&#39;)) {        $h += &#39;\&#39;    }    if (!($h -eq &#39;\&#39;)) {        $friendlyPath = &quot;$SCOOP_SHIMS_DIR&quot; -Replace ([Regex]::Escape($h)), &#39;~\&#39;        Write-InstallInfo &quot;Adding $friendlyPath to your path.&quot;    } else {        Write-InstallInfo &quot;Adding $SCOOP_SHIMS_DIR to your path.&quot;    }    # For future sessions    Write-Env &#39;PATH&#39; &quot;$SCOOP_SHIMS_DIR;$userEnvPath&quot;    # For current session    $env:PATH = &quot;$SCOOP_SHIMS_DIR;$env:PATH&quot;}</code></pre></div></figure><p>}</p><p>function Use-Config {<br>    if (!(Test-Path $SCOOP_CONFIG_FILE)) {<br>        return $null<br>    }</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">try {    return (Get-Content $SCOOP_CONFIG_FILE -Raw | ConvertFrom-Json -ErrorAction Stop)} catch {    Deny-Install &quot;ERROR loading $SCOOP_CONFIG_FILE`: $($_.Exception.Message)&quot;}</code></pre></div></figure><p>}</p><p>function Add-Config {<br>    param (<br>        [Parameter(Mandatory &#x3D; $True, Position &#x3D; 0)]<br>        [String] $Name,<br>        [Parameter(Mandatory &#x3D; $True, Position &#x3D; 1)]<br>        [String] $Value<br>    )</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">$scoopConfig = Use-Configif ($scoopConfig -is [System.Management.Automation.PSObject]) {    if ($Value -eq [bool]::TrueString -or $Value -eq [bool]::FalseString) {        $Value = [System.Convert]::ToBoolean($Value)    }    if ($null -eq $scoopConfig.$Name) {        $scoopConfig | Add-Member -MemberType NoteProperty -Name $Name -Value $Value    } else {        $scoopConfig.$Name = $Value    }} else {    $baseDir = Split-Path -Path $SCOOP_CONFIG_FILE    if (!(Test-Path $baseDir)) {        New-Item -Type Directory $baseDir | Out-Null    }    $scoopConfig = New-Object PSObject    $scoopConfig | Add-Member -MemberType NoteProperty -Name $Name -Value $Value}if ($null -eq $Value) {    $scoopConfig.PSObject.Properties.Remove($Name)}ConvertTo-Json $scoopConfig | Set-Content $SCOOP_CONFIG_FILE -Encoding ASCIIreturn $scoopConfig</code></pre></div></figure><p>}</p><p>function Add-DefaultConfig {<br>    # If user-level SCOOP env not defined, save to root_path<br>    if (!(Get-Env ‘SCOOP’)) {<br>        if ($SCOOP_DIR -ne “$env:USERPROFILE\scoop”) {<br>            Write-Verbose “Adding config root_path: $SCOOP_DIR”<br>            Add-Config -Name ‘root_path’ -Value $SCOOP_DIR | Out-Null<br>        }<br>    }</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none"># Use system SCOOP_GLOBAL, or set system SCOOP_GLOBAL# with $env:SCOOP_GLOBAL if RunAsAdmin, otherwise save to global_pathif (!(Get-Env &#39;SCOOP_GLOBAL&#39; -global)) {    if ((Test-IsAdministrator) -and $env:SCOOP_GLOBAL) {        Write-Verbose &quot;Setting System Environment Variable SCOOP_GLOBAL: $env:SCOOP_GLOBAL&quot;        [Environment]::SetEnvironmentVariable(&#39;SCOOP_GLOBAL&#39;, $env:SCOOP_GLOBAL, &#39;Machine&#39;)    } else {        if ($SCOOP_GLOBAL_DIR -ne &quot;$env:ProgramData\scoop&quot;) {            Write-Verbose &quot;Adding config global_path: $SCOOP_GLOBAL_DIR&quot;            Add-Config -Name &#39;global_path&#39; -Value $SCOOP_GLOBAL_DIR | Out-Null        }    }}# Use system SCOOP_CACHE, or set system SCOOP_CACHE# with $env:SCOOP_CACHE if RunAsAdmin, otherwise save to cache_pathif (!(Get-Env &#39;SCOOP_CACHE&#39; -global)) {    if ((Test-IsAdministrator) -and $env:SCOOP_CACHE) {        Write-Verbose &quot;Setting System Environment Variable SCOOP_CACHE: $env:SCOOP_CACHE&quot;        [Environment]::SetEnvironmentVariable(&#39;SCOOP_CACHE&#39;, $env:SCOOP_CACHE, &#39;Machine&#39;)    } else {        if ($SCOOP_CACHE_DIR -ne &quot;$SCOOP_DIR\cache&quot;) {            Write-Verbose &quot;Adding config cache_path: $SCOOP_CACHE_DIR&quot;            Add-Config -Name &#39;cache_path&#39; -Value $SCOOP_CACHE_DIR | Out-Null        }    }}# save current datatime to last_updateAdd-Config -Name &#39;last_update&#39; -Value ([System.DateTime]::Now.ToString(&#39;o&#39;)) | Out-Null</code></pre></div></figure><p>}</p><p>function Test-CommandAvailable {<br>    param (<br>        [Parameter(Mandatory &#x3D; $True, Position &#x3D; 0)]<br>        [String] $Command<br>    )<br>    return [Boolean](Get-Command $Command -ErrorAction SilentlyContinue)<br>}</p><p>function Install-Scoop {<br>    Write-InstallInfo ‘Initializing…’<br>    # Validate install parameters<br>    Test-ValidateParameter<br>    # Check prerequisites<br>    Test-Prerequisite<br>    # Enable TLS 1.2<br>    Optimize-SecurityProtocol</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none"># Download scoop from GitHubWrite-InstallInfo &#39;Downloading...&#39;$downloader = Get-Downloader[bool]$downloadZipsRequired = $Trueif (Test-CommandAvailable(&#39;git&#39;)) {    $old_https = $env:HTTPS_PROXY    $old_http = $env:HTTP_PROXY    try {        if ($downloader.Proxy) {            #define env vars for git when behind a proxy            $Env:HTTP_PROXY = $downloader.Proxy.Address            $Env:HTTPS_PROXY = $downloader.Proxy.Address        }        Write-Verbose &quot;Cloning $SCOOP_PACKAGE_GIT_REPO to $SCOOP_APP_DIR&quot;        git clone -q $SCOOP_PACKAGE_GIT_REPO $SCOOP_APP_DIR        if (-Not $?) {            throw &#39;Cloning failed. Falling back to downloading zip files.&#39;        }        Write-Verbose &quot;Cloning $SCOOP_MAIN_BUCKET_GIT_REPO to $SCOOP_MAIN_BUCKET_DIR&quot;        git clone -q $SCOOP_MAIN_BUCKET_GIT_REPO $SCOOP_MAIN_BUCKET_DIR        if (-Not $?) {            throw &#39;Cloning failed. Falling back to downloading zip files.&#39;        }        $downloadZipsRequired = $False    } catch {        Write-Warning &quot;$($_.Exception.Message)&quot;        $Global:LastExitCode = 0    } finally {        $env:HTTPS_PROXY = $old_https        $env:HTTP_PROXY = $old_http    }}if ($downloadZipsRequired) {    # 1. download scoop    $scoopZipfile = &quot;$SCOOP_APP_DIR\scoop.zip&quot;    if (!(Test-Path $SCOOP_APP_DIR)) {        New-Item -Type Directory $SCOOP_APP_DIR | Out-Null    }    Write-Verbose &quot;Downloading $SCOOP_PACKAGE_REPO to $scoopZipfile&quot;    $downloader.downloadFile($SCOOP_PACKAGE_REPO, $scoopZipfile)    # 2. download scoop main bucket    $scoopMainZipfile = &quot;$SCOOP_MAIN_BUCKET_DIR\scoop-main.zip&quot;    if (!(Test-Path $SCOOP_MAIN_BUCKET_DIR)) {        New-Item -Type Directory $SCOOP_MAIN_BUCKET_DIR | Out-Null    }    Write-Verbose &quot;Downloading $SCOOP_MAIN_BUCKET_REPO to $scoopMainZipfile&quot;    $downloader.downloadFile($SCOOP_MAIN_BUCKET_REPO, $scoopMainZipfile)    # Extract files from downloaded zip    Write-InstallInfo &#39;Extracting...&#39;    # 1. extract scoop    $scoopUnzipTempDir = &quot;$SCOOP_APP_DIR\_tmp&quot;    Write-Verbose &quot;Extracting $scoopZipfile to $scoopUnzipTempDir&quot;    Expand-ZipArchive $scoopZipfile $scoopUnzipTempDir    Copy-Item &quot;$scoopUnzipTempDir\scoop-*\*&quot; $SCOOP_APP_DIR -Recurse -Force    # 2. extract scoop main bucket    $scoopMainUnzipTempDir = &quot;$SCOOP_MAIN_BUCKET_DIR\_tmp&quot;    Write-Verbose &quot;Extracting $scoopMainZipfile to $scoopMainUnzipTempDir&quot;    Expand-ZipArchive $scoopMainZipfile $scoopMainUnzipTempDir    Copy-Item &quot;$scoopMainUnzipTempDir\Main-*\*&quot; $SCOOP_MAIN_BUCKET_DIR -Recurse -Force    # Cleanup    Remove-Item $scoopUnzipTempDir -Recurse -Force    Remove-Item $scoopZipfile    Remove-Item $scoopMainUnzipTempDir -Recurse -Force    Remove-Item $scoopMainZipfile}# Create the scoop shimImport-ScoopShim# Finially ensure scoop shims is in the PATHAdd-ShimsDirToPath# Setup initial configuration of ScoopAdd-DefaultConfigWrite-InstallInfo &#39;Scoop was installed successfully!&#39; -ForegroundColor DarkGreenWrite-InstallInfo &quot;Type &#39;scoop help&#39; for instructions.&quot;</code></pre></div></figure><p>}</p><p>function Write-DebugInfo {<br>    param($BoundArgs)</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">Write-Verbose &#39;-------- PSBoundParameters --------&#39;$BoundArgs.GetEnumerator() | ForEach-Object { Write-Verbose $_ }Write-Verbose &#39;-------- Environment Variables --------&#39;Write-Verbose &quot;`$env:USERPROFILE: $env:USERPROFILE&quot;Write-Verbose &quot;`$env:ProgramData: $env:ProgramData&quot;Write-Verbose &quot;`$env:SCOOP: $env:SCOOP&quot;Write-Verbose &quot;`$env:SCOOP_CACHE: $SCOOP_CACHE&quot;Write-Verbose &quot;`$env:SCOOP_GLOBAL: $env:SCOOP_GLOBAL&quot;Write-Verbose &#39;-------- Selected Variables --------&#39;Write-Verbose &quot;SCOOP_DIR: $SCOOP_DIR&quot;Write-Verbose &quot;SCOOP_CACHE_DIR: $SCOOP_CACHE_DIR&quot;Write-Verbose &quot;SCOOP_GLOBAL_DIR: $SCOOP_GLOBAL_DIR&quot;Write-Verbose &quot;SCOOP_CONFIG_HOME: $SCOOP_CONFIG_HOME&quot;</code></pre></div></figure><p>}</p><h1 id="Prepare-variables"><a href="#Prepare-variables" class="headerlink" title="Prepare variables"></a>Prepare variables</h1><p>$IS_EXECUTED_FROM_IEX &#x3D; ($null -eq $MyInvocation.MyCommand.Path)</p><h1 id="Abort-when-the-language-mode-is-restricted"><a href="#Abort-when-the-language-mode-is-restricted" class="headerlink" title="Abort when the language mode is restricted"></a>Abort when the language mode is restricted</h1><p>Test-LanguageMode</p><h1 id="Scoop-root-directory"><a href="#Scoop-root-directory" class="headerlink" title="Scoop root directory"></a>Scoop root directory</h1><p>$SCOOP_DIR &#x3D; $ScoopDir, $env:SCOOP, “$env:USERPROFILE\scoop” | Where-Object { -not [String]::IsNullOrEmpty($_) } | Select-Object -First 1</p><h1 id="Scoop-global-apps-directory"><a href="#Scoop-global-apps-directory" class="headerlink" title="Scoop global apps directory"></a>Scoop global apps directory</h1><p>$SCOOP_GLOBAL_DIR &#x3D; $ScoopGlobalDir, $env:SCOOP_GLOBAL, “$env:ProgramData\scoop” | Where-Object { -not [String]::IsNullOrEmpty($_) } | Select-Object -First 1</p><h1 id="Scoop-cache-directory"><a href="#Scoop-cache-directory" class="headerlink" title="Scoop cache directory"></a>Scoop cache directory</h1><p>$SCOOP_CACHE_DIR &#x3D; $ScoopCacheDir, $env:SCOOP_CACHE, “$SCOOP_DIR\cache” | Where-Object { -not [String]::IsNullOrEmpty($_) } | Select-Object -First 1</p><h1 id="Scoop-shims-directory"><a href="#Scoop-shims-directory" class="headerlink" title="Scoop shims directory"></a>Scoop shims directory</h1><p>$SCOOP_SHIMS_DIR &#x3D; “$SCOOP_DIR\shims”</p><h1 id="Scoop-itself-directory"><a href="#Scoop-itself-directory" class="headerlink" title="Scoop itself directory"></a>Scoop itself directory</h1><p>$SCOOP_APP_DIR &#x3D; “$SCOOP_DIR\apps\scoop\current”</p><h1 id="Scoop-main-bucket-directory"><a href="#Scoop-main-bucket-directory" class="headerlink" title="Scoop main bucket directory"></a>Scoop main bucket directory</h1><p>$SCOOP_MAIN_BUCKET_DIR &#x3D; “$SCOOP_DIR\buckets\main”</p><h1 id="Scoop-config-file-location"><a href="#Scoop-config-file-location" class="headerlink" title="Scoop config file location"></a>Scoop config file location</h1><p>$SCOOP_CONFIG_HOME &#x3D; $env:XDG_CONFIG_HOME, “$env:USERPROFILE.config” | Select-Object -First 1<br>$SCOOP_CONFIG_FILE &#x3D; “$SCOOP_CONFIG_HOME\scoop\config.json”</p><h1 id="TODO-Use-a-specific-version-of-Scoop-and-the-main-bucket"><a href="#TODO-Use-a-specific-version-of-Scoop-and-the-main-bucket" class="headerlink" title="TODO: Use a specific version of Scoop and the main bucket"></a>TODO: Use a specific version of Scoop and the main bucket</h1><p>$SCOOP_PACKAGE_REPO &#x3D; ‘<a href="https://github.com/ScoopInstaller/Scoop/archive/master.zip">https://github.com/ScoopInstaller/Scoop/archive/master.zip</a>‘<br>$SCOOP_MAIN_BUCKET_REPO &#x3D; ‘<a href="https://github.com/ScoopInstaller/Main/archive/master.zip">https://github.com/ScoopInstaller/Main/archive/master.zip</a>‘</p><p>$SCOOP_PACKAGE_GIT_REPO &#x3D; ‘<a href="https://github.com/ScoopInstaller/Scoop.git">https://github.com/ScoopInstaller/Scoop.git</a>‘<br>$SCOOP_MAIN_BUCKET_GIT_REPO &#x3D; ‘<a href="https://github.com/ScoopInstaller/Main.git">https://github.com/ScoopInstaller/Main.git</a>‘</p><h1 id="Quit-if-anything-goes-wrong"><a href="#Quit-if-anything-goes-wrong" class="headerlink" title="Quit if anything goes wrong"></a>Quit if anything goes wrong</h1><p>$oldErrorActionPreference &#x3D; $ErrorActionPreference<br>$ErrorActionPreference &#x3D; ‘Stop’</p><h1 id="Logging-debug-info"><a href="#Logging-debug-info" class="headerlink" title="Logging debug info"></a>Logging debug info</h1><p>Write-DebugInfo $PSBoundParameters</p><h1 id="Bootstrap-function"><a href="#Bootstrap-function" class="headerlink" title="Bootstrap function"></a>Bootstrap function</h1><p>Install-Scoop</p><h1 id="Reset-ErrorActionPreference-to-original-value"><a href="#Reset-ErrorActionPreference-to-original-value" class="headerlink" title="Reset $ErrorActionPreference to original value"></a>Reset $ErrorActionPreference to original value</h1><p>$ErrorActionPreference &#x3D; $oldErrorActionPreference<br></code></pre></p></details>]]></content>
    
    
    <categories>
      
      <category>article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>default</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>扩展欧几里德</title>
    <link href="/posts/82456769/"/>
    <url>/posts/82456769/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>蓝桥杯</category>
      
      <category>数论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>default</tag>
      
      <tag>未完</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/posts/a80d0031/"/>
    <url>/posts/a80d0031/</url>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章，包括之后一系列的蓝桥杯文章都是在学习了<a href="https://programmercarl.com/">代码随想录</a>的公开内容之后的个人总结。</p><p>十分推荐<a href="https://programmercarl.com/">代码随想录</a>这个网站，里面有不少信息竞赛的相关知识。虽然不是针对竞赛，但大部分内容是一样的，而且讲得很细。其在B站也有视频：<a href="https://space.bilibili.com/525438321">代码随想录个人主页-哔哩哔哩视频</a>。</p></blockquote><h1 id="1-动态规划5步曲"><a href="#1-动态规划5步曲" class="headerlink" title="1 动态规划5步曲"></a>1 动态规划5步曲</h1><p>动态规划，可以看作是递推的一个推广。因此，一个问题能否用动态规划问题解决，需要看这个问题能否被分解为一个递推问题。具体来说，可以考虑如下的问题：</p><ul><li>能否分解为子问题？</li><li>子问题与原问题是什么关系？</li></ul><p>当然，有的问题不一定一眼能看出来，我的习惯是先带入dp的方法来看，如果定义的dp数组可以写出递推公式，那大概率就可以用dp做。</p><p>基本上，所有的dp问题的解决方法都可以归纳为如下的5步（来自代码随想录）：</p><ol><li>明确dp数组的定义；</li><li>找递推公式；</li><li>dp的初始化；</li><li>遍历顺序；</li><li>打印dp数组。</li></ol><p>我自己在此基础上修改了一些，变成了下面的这 5 步：</p><ol><li>dp定义；</li><li>递推公式；</li><li>结果形式（最后的输出是什么？是一个值还是一个等式）；</li><li>初始条件；</li><li>遍历顺序。</li></ol><p>经典问题一般有一个固定的模板（除了普通dp），这些模板的意义在于让我们看到这个问题之后能够较快的反应过来。<br>但如果没有按照5步曲来做，没有理解5步曲里每一步在具体问题里的具体含义，背模板只能是表面上的会，如果题目变一下就不会做了。</p><h1 id="2-普通dp"><a href="#2-普通dp" class="headerlink" title="2 普通dp"></a>2 普通dp</h1><p>在力扣上的dp入门题如下：</p><ul><li><a href="https://leetcode.cn/problems/climbing-stairs/">70 爬楼梯</a></li><li><a href="https://leetcode.cn/problems/fibonacci-number/">509 斐波那契数</a></li><li><a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">746 使用最小花费爬楼梯</a></li><li><a href="https://leetcode.cn/problems/unique-paths/">62 不同路径</a></li><li><a href="https://leetcode.cn/problems/unique-paths-ii/">63 不同路径 II</a></li><li><a href="https://leetcode.cn/problems/integer-break/">343 整数拆分</a></li><li><a href="https://leetcode.cn/problems/unique-binary-search-trees/">96 不同的二叉搜索树</a></li></ul><p>这类dp问题的难点在于，分析出这些问题可以用dp，并正确写出dp数组的定义。<br>如果有了dp数组的定义，后续的5步曲就相对容易了一点。</p><p>比如<a href="https://leetcode.cn/problems/unique-binary-search-trees/">96 不同的二叉搜索树</a>，<br>考虑一个相对一般的n，比如n&#x3D;3，<br>当我们选择一个元素作为二叉搜索树的root后，其方案数就变成了子树方案数的排列组合，<br>因此原问题就分解为了一个相同的子问题。</p><h1 id="3-背包问题"><a href="#3-背包问题" class="headerlink" title="3 背包问题"></a>3 背包问题</h1><p>背包问题最明显的特征是取数，在一个集合里取数。</p><h2 id="3-1-01背包"><a href="#3-1-01背包" class="headerlink" title="3.1 01背包"></a>3.1 01背包</h2><div class="note note-info">            <p><strong>简单描述：</strong></p><p>有n个物品，每个物品有价值<code>value</code>和体积<code>weight</code>。我们需要选择一些物品到一个固定容量的背包，每个物品<em><strong>只能选择一次</strong></em>。问最大价值是多少。</p>          </div><h3 id="3-1-1-基本解法"><a href="#3-1-1-基本解法" class="headerlink" title="3.1.1 基本解法"></a>3.1.1 基本解法</h3><p><strong>step1，dp数组定义</strong></p><p>对于经典的01背包问题，可以定义dp数组<code>dp[i][j]</code>，含义是从第<code>1</code>个物品到第<code>i</code>个物品（根据数组的下标也可能是从<code>0</code>到<code>i</code>），当背包容量为<code>j</code>时的装的最大价值。</p><p><strong>step2，递推公式</strong></p><p>假设当前是第 i 个物品，当前可用容量为 j ，现在有2种情况：</p><ol><li>不选第 i 个物品，那么最大价值就是上一个的最大价值：<code>dp[i-1][j]</code>；</li><li>选第 i 个物品，那么就需要在上一个的最大价值（<code>dp[i-1][j]</code>）的基础上承受 <code>weight[i]</code> 的代价（体积），价值则增加了 <code>value[i]</code>，即<code>dp[i-1][j - weight[i]] + value[i]</code></li></ol><p>也就是下面的公式：<br>$$<br>\mathrm{dp}[i][j] &#x3D; \max(\mathrm{dp}[i-1][j], \mathrm{dp}[i-1][j-\mathrm{weight}[i]]+\mathrm{value}[i])<br>$$</p><p><strong>step3，初始化</strong></p><p>现在的 dp 数组是一个二维数组，每一个值都由它正上面相邻的格子和正上方格子左侧的格子推导而得，<br>因此我们需要初始化第 1 行和第 1 列。</p><p><a id="pic1"><br><br></a></p><img src="/img/Pasted%20image%2020241028181451.png" width=60% /><p>第 1 列的含义是：当可用容量为 0 时的最大价值。显然为 0。<br>第 1 行的含义是：对于第 1 个物品，容量为 j 时的最大价值。<br>如果 <code>j</code> 比 <code>weight[0]</code> 小，那一定是 0。而 <code>j</code> 比 <code>weight[0]</code> 大的所有格子，都应该为 <code>value[0]</code>。</p><p><strong>step4，遍历顺序</strong></p><p>根据我刚才的<a href="#pic1">图片</a>，</p><ul><li>对于物品：只能从小到大。</li><li>对于容量：可以从小到大，也可以从大到小。</li><li>对于物品和容量之间：可以交换。</li></ul><p>具体的原理手动模拟一遍就可以了，不过多解释。</p><hr><h3 id="3-1-2-状态压缩"><a href="#3-1-2-状态压缩" class="headerlink" title="3.1.2 状态压缩"></a>3.1.2 状态压缩</h3><p>从刚才的遍历就可以发现，当前行只依赖于上一行，而且对右上角没有依赖。因此可以状态压缩。</p><p>压缩后，dp 就成了 <code>dp[j]</code>。需要注意的是，此时的遍历顺序就固定了，没有可以交换的部分，即<strong>外层：物品从小到大，内层：容量从大到小</strong>。</p><ul><li>内外无法交换：只有行间是相邻的依赖，列与列之间的依赖跨行了。</li><li>内层只能从大到小：行首的值会被行尾的用，因此只能先改行尾，再改行首。</li></ul><h3 id="3-1-3-变体"><a href="#3-1-3-变体" class="headerlink" title="3.1.3 变体"></a>3.1.3 变体</h3><p>01背包常见的问法（变体）：</p><ul><li>尽量装满容器，求最大价值（当物品价值等于物品体积，就成了最多能装多少体积）；</li><li>能不能装满容器；</li><li>尽量装满容器的方案数。</li></ul><p>01背包问题，在容量上有这样的关系：<br>$$<br>\mathrm{选的物品占的空间} \le \mathrm{背包容量} \tag{2.2.1}<br>$$</p><p>如果物品的价值等于其自身的体积，那么背包问题求的最大价值就等价于求最大体积。</p><div class="note note-primary">            <details><summary>Leetcode 416.分割等和子集</summary>这题可以看作一个01背包问题，让$sum/2$的背包的最大价值（也即最大体积）等于$sum/2$，则式$\mathrm{(2.2.1)}$的等号取等，则说明有分解方案。</details>          </div><h2 id="3-2-完全背包"><a href="#3-2-完全背包" class="headerlink" title="3.2 完全背包"></a>3.2 完全背包</h2><p>完全背包， 之于 01 背包，最大的区别就在于其没有物品数量上的限制。<br>在理解了基本的动态规划 5 步和 01 背包问题后，完全背包相对而言就很简单了。</p><p>代码随想录的视频里说，区别就在：一维数组内层遍历的顺序改为从小到大。<br>在这里，代码随想录里有解释为什么，但他用的是一维数组举的例子。<br>我还是喜欢先用二维数组进行理解，而且我觉得二维数组更接近问题的本质一些。</p><p>在二维中， 递推公式是：<br>$$<br>\mathrm{dp}[i][j] &#x3D; \max(\mathrm{dp}[i-1][j] , \mathrm{dp}[{\color{red}i}][j-\mathrm{w}[i]])<br>$$</p><img src=/img/Pasted%20image%2020241123212006.png width=60%/><p>这个公式表示，当前 dp 数组的值可以从这两个地方更新：</p><ol><li>当前物品一个都不选，则来自 $\mathrm{dp}[i-1][j]$，</li><li>当前物品要选，但不知道选多少个。则来自 $\mathrm{dp}[i][j-\mathrm{w}[i]]$。</li></ol><p>为什么当前不知道选多少个时可以从 $\mathrm{dp}[i][j-\mathrm{w}[i]]$ 更新？这是其实是把问题给分解了。<br>我们在考虑 dp 递推公式时，考虑的是一个子问题，而不是一些子问题的组合。</p><p>比如以上面的图为例，当前的子问题和 01 背包问题的子问题很像，都是看：选第 i 个物品而容量为 j 时的价值如何从相邻的状态里获得。</p><p>在 01 背包和完全背包中，dp数组的定义没变，<br>但 01 背包中，左边的箭头是从左上到右下，是因为当前物品只能选一次，<br>如果要选物品 i ，那么选之前的状态只能是 <strong>还没有选物品 i</strong> 的，也就是 i-1。</p><p>而在完全背包中，如果要选物品 i ，那么选之前的状态可能来自 <strong>还没选</strong> ，也可能来自 <strong>选了一个，又想选一个</strong>。同时，<strong>选了一个，又想选一个</strong> 的状态已经把 <strong>还没选</strong> 的状态也包括了，也就是 $\mathrm{dp}[{\color{red}i}][j-\mathrm{w}[i]]$ 包括了 $\mathrm{dp}[{\color{green}i-1}][j-\mathrm{w}[i]]$，因此箭头直接变成了从左向右。</p><p>如果理解了这个，也就不难理解为什么状压之后内层（背包容量）的遍历顺序是正向的了。</p><p>另外，当问题是求最大价值时，内层和外层可以交换遍历顺序。如果是其它的（如组合数，或排列数），则不一定能交换，需要具体分析。</p><div class="note note-primary">            <details><summary>Leetcode 518.零钱兑换II</summary>此题是一道完全背包问题。dp数组的定义为是总方案数（排列组合里的组合），这里内层外层就不能交换。如果交换就成了求排列数了。</details>          </div>]]></content>
    
    
    <categories>
      
      <category>蓝桥杯</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>default</tag>
      
      <tag>未完</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STL-队列，栈，堆</title>
    <link href="/posts/dac9b442/"/>
    <url>/posts/dac9b442/</url>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/586297567">【C++学习笔记】：priority_queue容器 - 知乎</a></p><p><a href="https://blog.csdn.net/Kprogram/article/details/82055673">STL - emplace 与 push 的区别_优先级队列的emplace和push函数的却别-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>C++ 语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STL</tag>
      
      <tag>语法</tag>
      
      <tag>未完</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>偏微分方程02_方程的导出，化简与分类</title>
    <link href="/posts/926ecd88/"/>
    <url>/posts/926ecd88/</url>
    
    <content type="html"><![CDATA[<h1 id="1-波动方程"><a href="#1-波动方程" class="headerlink" title="1 波动方程"></a>1 波动方程</h1><h1 id="2-热传导方程"><a href="#2-热传导方程" class="headerlink" title="2 热传导方程"></a>2 热传导方程</h1><h1 id="3-位势方程"><a href="#3-位势方程" class="headerlink" title="3 位势方程"></a>3 位势方程</h1><h1 id="4-二元二阶线性方程的化简与分类"><a href="#4-二元二阶线性方程的化简与分类" class="headerlink" title="4 二元二阶线性方程的化简与分类"></a>4 二元二阶线性方程的化简与分类</h1><h2 id="分析思路"><a href="#分析思路" class="headerlink" title="分析思路"></a>分析思路</h2><p>二元二阶线性方程的基本形式如下：（<strong>其中 $a, b, c$ 不同时为0</strong>）</p><p>$$<br>a(x,y)u_{xx}+ 2b(x,y)u_{xy} + c(x,y)u_{yy} +d(x,y) u_x+e(x,y)u_y+f(x,y)u &#x3D; g(x,y)\tag{2.4.1}<br>$$</p><p>为了对这个方程进行化简，我们对<strong>自变量进行局部变换</strong>。</p><p><img src="/img/Pasted%20image%2020241026200846.png"></p><blockquote><p>Q: 为什么进行变换？<br><br>A: 目的是通过变换，把二阶导的系数化简，消除 1 到 2 个二阶项，最好把二阶项全部消掉。</p><p>Q: 为什么可以变换？<br><br>A: 利用<a href="#goal2">隐函数存在定理</a>。<br>Q: 为什么对自变量进行变换？<br><br>A: 当然也可以做其它的变换，只不过讲的是以书上的方法为主。</p></blockquote><p><span id="goal2"><br><br></span></p><blockquote><p>隐函数存在定理<a href="%E8%A7%81%E4%B9%8B%E5%90%8E%E7%9A%84%E7%AC%94%E8%AE%B0%EF%BC%8C%E6%88%96%E8%87%AA%E8%A1%8C%E6%90%9C%E7%B4%A2%E3%80%82">^ref1</a>：</p><ul><li>一元：$\frac{\partial y}{\partial x} \ne 0\Longrightarrow x &#x3D;x(y)$ 存在（只有充分性）。</li><li>二元：Jacobi 矩阵 $\ne 0$ ，即：<br>$$<br>\begin{gather}<br>\begin{bmatrix}<br>\frac{\partial f_1}{\partial x} &amp;<br>\frac{\partial f_1}{\partial y} \<br>\frac{\partial f_2}{\partial x} &amp;<br>\frac{\partial f_2}{\partial y}<br>\end{bmatrix} \ne 0<br>\end{gather}<blockquote><p>$$</p></blockquote></li></ul></blockquote><p><strong>在 $(x_0, y_0)$ 附近</strong>利用 $\xi &#x3D; \xi(x,y), \eta &#x3D; \eta(x,y)$ 可以把式 $\mathrm{(2.4.1)}$ 写成以 $\xi, \eta$ 为自变量的方程：<br>$$<br>AU_{\xi\xi} + 2BU_{\xi\eta} + CU_{\eta\eta} + DU_{\xi} + EU_{\eta}+FU &#x3D; G \tag{2.4.4}<br>$$</p><p>主要矛盾在二阶项，所以我们暂时只关注二阶项的系数。<br>把 $A,B,C$ 展开：<br>$$<br>\begin{gather}<br>\large<br>\begin{cases}<br>\displaylines A(\xi, \eta) &#x3D; (a\xi_x^2 + 2b\xi_x\xi_y + c\xi_y^2)\big\vert_{x &#x3D; x(\xi, \eta), y &#x3D; y(\xi, \eta)}\<br>\displaylines B(\xi, \eta) &#x3D; (a\xi_x\eta_x + b(\xi_x\eta_y+\xi_y\eta_x) + c\xi_y\eta_y) \<br>\displaylines C(\xi, \eta) &#x3D; (a\eta_x^2 + 2b\eta_x\eta_y + c\eta_y^2)\big\vert_{x &#x3D; x(\xi, \eta), y &#x3D; y(\xi, \eta)}\<br>\end{cases}\tag{2.4.5}<br>\end{gather}<br>$$<br>我们自然希望 $A &#x3D; B &#x3D; C &#x3D; 0$ 。但我们可以证明，A,B,C 不能同时为 0。</p><blockquote><p>证明（思路）：</p><p>把式 $\mathrm{(2.4.5)}$ 看成关于 a, b, c 的参数方程，可以写出系数矩阵。如果 $A &#x3D; B &#x3D; C &#x3D; 0$ ，则方程组的解 (a, b, c) 也都为 0。这样的话与前提的假设矛盾。</p></blockquote><p>既然不能 3 个都为 0 ，那么可不可以让其中 1 个或 2 个为 0 ？观察可以发现，$A(\xi, \eta)$ 和 $C(\xi,\eta)$ 的形式相似，因此我们可以想办法试试让 $A &#x3D; C &#x3D; 0$。</p><p><span id="goal1"><br><br></span><br>现在我们的目标就变成了：让 $A &#x3D; C &#x3D; 0$ 。</p><p>为了达到分析一个方程，解 A,C 两个方程，我们先把 A, C 的表达式改一下。</p><p>$$<br>a\varphi^2_x + 2b\varphi_x\varphi_y + c\varphi_y^2 &#x3D; 0 \tag{2.4.7}<br>$$</p><p><a id="goal3"><br><br></a></p><p>对于式 $\mathrm{(2.4.7)}$， 如果它有2个解，并且其Jacobi行列式 $$\left\vert\frac{\partial (\varphi_1, \varphi_2)}{\partial (x, y)}\right\vert \ne 0$$（可逆变换），则就可以实现我们想要的<a href="#goal1">目标</a>了。</p><p>现在问题转换为：方程 $\mathrm{(2.4.7)}$ 的解的判断。</p><p>这个问题，可以用下面的命题回答：</p><div class="note note-warning">            <p>命题</p><p>若 $\varphi(x,y) &#x3D; C$ （常数）是一阶常微分方程：<br>$$<br>a\mathrm{d}y^2 -2b \mathrm{d}y\mathrm{d}x+c\mathrm{d}x^2 &#x3D; 0 \tag{2.4.8}<br>$$<br>的隐式解，且 $\varphi_x, \varphi_y$ 不同时为 0 ($\varphi_x^2+\varphi_y^2 \ne 0$)，则 $\varphi(x, y)$ 是方程 $\mathrm{(2.4.7)}$ 的解。</p>          </div><blockquote><p>证明思路：<br><br>对 $\varphi_x^2 + \varphi_y^2 &#x3D; 0$ 两边求 $\varphi_x$ 的导，得：<br>$$<br>\begin{gather}<br>2\varphi_x + 2\varphi_y\frac{\varphi_y}{\varphi_x} &#x3D; 0\<br>\varphi_x + \varphi_y\frac{\mathrm{d}y}{\mathrm{d}x} &#x3D; 0\<br>\therefore \frac{\mathrm{d}y}{\mathrm{d}x} &#x3D; -\frac{\varphi_x}{\varphi_y}<br>\end{gather}<br>$$</p><p>代回式 $\mathrm{(2.4.8)}$，则可以得到式 $\mathrm{(2.4.7)}$ 的格式。 </p></blockquote><p>这里的式 $\mathrm{(2.4.8)}$称为式 $\mathrm{(2.4.1)}$ 的特征方程。</p><p>于是，现在的目的成了：求解式 $\mathrm{(2.4.8)}$。</p><ul><li>如果 $a(x_0, y_0) &#x3D; c(x_0, y_0) &#x3D; 0$ (这里 a, c 的含义与式 $\mathrm{(2.4.1)}$ 的含义相同)，则式 $\mathrm{(2.4.1)}$ 不用化简。</li><li>如果 $a(x_0, y_0) , c(x_0, y_0)$ 中只有一个为 0， 不妨设 $a &#x3D;0$，则式 $\mathrm{(2.4.1)}$的特征方程 $\mathrm{(2.4.8)}$ 可以写成：<br>$$<br>a\left({\frac{\mathrm{d}y}{\mathrm{d}x}}\right)^2 -2b\left(\frac{\mathrm{d}y}{\mathrm{d}x}\right) + c &#x3D; 0\tag{2.4.9}<br>$$</li></ul><p>式 $\mathrm{(2.4.9)}$ 看作一个一元二次方程，其 $\delta &#x3D;b^2-ac$ 。<br>接下来就对 $\delta$ 分情况讨论。</p><h3 id="case1-delta-0"><a href="#case1-delta-0" class="headerlink" title="case1. $\delta&gt;0$"></a>case1. $\delta&gt;0$</h3><p><mark>大于0的前提是在 $(x_0, y_0)$ 附近</mark></p><p>此一元二次方程有2个根，我们也就可以把式 $\mathrm{(2.4.9)}$ 看作 2 个方程：<br>$$<br>\begin{aligned}<br>\frac{\mathrm{d}y}{\mathrm{d}x} &amp;&#x3D; \frac{b + \sqrt{\delta}}{a}(x,y)\<br>\frac{\mathrm{d}y}{\mathrm{d}x} &amp;&#x3D; \frac{b - \sqrt{\delta}}{a}(x,y)\<br>\end{aligned}<br>\tag{2.4.10}<br>$$<br>由常微分方程解的存在唯一性，式 $\mathrm{(2.4.9)}$ 有 2 个解： $y &#x3D; y_k(x; C); k &#x3D; 1, 2$，其初始条件为 $y(x_0) &#x3D; y_0+C$ （初始位置加一个小搅动）。</p><blockquote><p>Q: 为什么初始条件要加一个小搅动？<br><br>A: 讨论的区域是在 $(x_0, y_0)$ 附近，并非严格的 $(x_0, y_0)$ 点。</p></blockquote><p>上面的解是一个显式表达，x, y 地位不平等。我们希望求得隐式表达，好给式 $\mathrm{(2.4.8)}$。</p><p>因此，下面把 $y &#x3D; y_k(x;C)$ 变成 $\varphi_k(x, y) &#x3D;C$ 的形式。（用隐函数存在定理）</p><p>在方程式 $\mathrm{(2.4.10)}$ 和初始条件两边对 $C$ 求导：<br>$$<br>\begin{cases}<br>\frac{\mathrm{d}}{\mathrm{d}x}\left(\frac{\partial y}{\partial C}\right) &#x3D; \frac{\partial }{\partial y} \left(\frac{b \pm \sqrt{\delta}}{a}(x, y)\right)\frac{\partial y}{\partial C}\<br>\frac{\partial y}{\partial C}(x_0; C) &#x3D; 1<br>\end{cases}<br>$$</p><p>这是一个关于 $\frac{\partial y}{\partial C}$ 的一阶线性常微分方程问题，可以解得：<br>$$<br>\frac{\partial y}{\partial C} &#x3D; \exp\left(\int_{x_0}^x\frac{\partial}{\partial y}\left(\frac{b\pm\sqrt{\delta}}{a}\left(\xi, y(\xi, C)\right)\mathrm{d} \xi\right)\right) &gt; 0<br>$$<br>（不用管里面解出来是什么，只要不为 0 就行）</p><blockquote><p>求隐函数：<strong>要求谁，对谁求导</strong>。求 $y$，因此对 $y$ 求导。</p></blockquote><p>由隐函数存在定理，从式 $\mathrm{(2.4.10)}$ 可以解出 $C&#x3D;\varphi_k(x, y)$ ， $C$ 满足式 $\mathrm{(2.4.7)}$ </p><p>现在我们相当于求到了<a href="#goal3">之前</a> $\mathrm{(2.4.7)}$ 里的 $\varphi_1, \varphi_2$，还需要验证 Jacobi 行列式以确保可逆变换。</p><div class="note note-info">            <p>验证 Jacobi 行列式</p><p>对 $y &#x3D; y_k(x; \varphi_k(x, y))$ 两边分别对 $x, y$ 求导：<br>$$<br>0 &#x3D; \frac{\partial y_k}{\partial x} + \frac{\partial y_k}{\partial C}\varphi_{kx}(x,y)\quad 1 &#x3D; \frac{\partial y_k}{\partial C}\varphi_{ky}<br>$$<br>在 $(x_0, y_0)$ 附近时（感觉应该是指 $x&#x3D;x_0$ 时）$y(x_0) &#x3D; y_0+C$，$\frac{\partial y_k(x_0, C)}{\partial C} &#x3D; \frac{\partial}{\partial C}(y_0+C) &#x3D; 1$：<br>$$<br>\varphi_{kx} &#x3D; -\frac{\partial y_k}{\partial x} &#x3D; -y_k’, \quad \varphi_{ky} &#x3D; 1<br>$$<br>故Jacobi 非 0。</p>          </div><p> <strong>结论</strong>：当我们求出来 式 $\mathrm{(2.4.8)}$ 的隐式解之后，令 $\xi &#x3D; \varphi_1(x, y), \eta &#x3D; \varphi_2(x,y)$，从而式 $\mathrm{(2.4.5)}$ 中的 $A&#x3D;C&#x3D;0$，式 $\mathrm{(2.4.4)}$ 写成：<br> $$<br> {\color{red}{\Huge U_{\xi\eta}} &#x3D; D_1U_{\xi} + E_1U_{\eta} + F_1U + G_1, \tag{2.4.10}}<br> $$</p><div class="note note-primary">            <details><summary>例</summary>化简并求解方程：$$4u_{xx} + 5u_{xy} + u_{yy} + u_x + u_y = 2$$---论化简，step1，列出形如 式 $\mathrm{(2.4.9)}$ 的式子。<br>step2，判断 $\delta$ 与 0 的关系。<br>step3，解一元二次方程<br>step4，解常微分方程得 $y$ 的表达式 $y(x, C)$。<br>step5，令 $\xi=\varphi_1(x, y), \eta = \varphi_2(x,y)$，然后把 $x,y$ 用 $\xi, \eta$ 表示出来。<br>step6，用 $u, U$ 表达。 <h2 id="解：-观察可得-a-4-b-frac25-c-1-，-delta-b-2-ac-0-。故有：-4-left-frac-mathrm-d-y-mathrm-d-x-right-2-5-left-frac-mathrm-d-y-mathrm-d-x-right-1-0-解得：-frac-mathrm-d-y-mathrm-d-x-1-或-frac14-解-mathrm-d-x-mathrm-d-y-的常微分方程，得：-frac14x-C-或-y-x-C-也即：-C-frac14x-y-或-C-x-y-令-xi-frac14x-y-eta-x-y-，则-u-x-y-U-y-x-y-frac-x-4-。-frac-partial-u-partial-x-frac-partial-U-partial-xi-frac-partial-xi-partial-x-frac-partial-U-partial-eta-frac-partial-eta-partial-x-U-xi-frac14-U-eta-同理可得：-begin-gather-u-y-U-xi-U-eta-u-xx-U-xi-xi-frac12U-xi-eta-frac-1-16-U-eta-eta-u-xx-U-xi-xi-frac54U-xi-eta-frac-1-4-U-eta-eta-u-xx-U-xi-xi-2U-xi-eta-U-eta-eta-end-gather-把小写-u-全部替换成大写-U-得：-frac94U-xi-eta-frac34U-eta-2-即：-U-xi-eta-frac13U-eta-frac89"><a href="#解：-观察可得-a-4-b-frac25-c-1-，-delta-b-2-ac-0-。故有：-4-left-frac-mathrm-d-y-mathrm-d-x-right-2-5-left-frac-mathrm-d-y-mathrm-d-x-right-1-0-解得：-frac-mathrm-d-y-mathrm-d-x-1-或-frac14-解-mathrm-d-x-mathrm-d-y-的常微分方程，得：-frac14x-C-或-y-x-C-也即：-C-frac14x-y-或-C-x-y-令-xi-frac14x-y-eta-x-y-，则-u-x-y-U-y-x-y-frac-x-4-。-frac-partial-u-partial-x-frac-partial-U-partial-xi-frac-partial-xi-partial-x-frac-partial-U-partial-eta-frac-partial-eta-partial-x-U-xi-frac14-U-eta-同理可得：-begin-gather-u-y-U-xi-U-eta-u-xx-U-xi-xi-frac12U-xi-eta-frac-1-16-U-eta-eta-u-xx-U-xi-xi-frac54U-xi-eta-frac-1-4-U-eta-eta-u-xx-U-xi-xi-2U-xi-eta-U-eta-eta-end-gather-把小写-u-全部替换成大写-U-得：-frac94U-xi-eta-frac34U-eta-2-即：-U-xi-eta-frac13U-eta-frac89" class="headerlink" title=" 解： 观察可得 $a &#x3D; 4, b&#x3D; \frac25, c&#x3D; 1$，$\delta &#x3D; b^2-ac&gt;0$。故有： $$4\left(\frac{\mathrm{d}y}{\mathrm{d}x}\right)^2 - 5\left(\frac{\mathrm{d}y}{\mathrm{d}x}\right) + 1 &#x3D; 0 $$ 解得： $$\frac{\mathrm{d}y}{\mathrm{d}x} &#x3D; 1 或 \frac14 $$解 $\mathrm{d}x, \mathrm{d}y$ 的常微分方程，得：$$&#x3D; \frac14x+C 或 y &#x3D; x+C$$也即：$$C&#x3D; -\frac14x+y 或 C &#x3D; -x + y$$令 $\xi &#x3D; -\frac14x+y, \eta &#x3D; -x+y$ ，则 $u(x, y) &#x3D; U(y-x, y - \frac{x}{4})$。$$\frac{\partial u}{\partial x} &#x3D; \frac{\partial U}{\partial \xi}\frac{\partial \xi}{\partial x} + \frac{\partial U}{\partial\eta}\frac{\partial \eta}{\partial x} &#x3D; -U_{\xi} -\frac14 U_{\eta}$$同理可得：$$\begin{gather}u_y &#x3D; U_{\xi} + U_{\eta}\u_{xx} &#x3D; U_{\xi\xi}+\frac12U_{\xi\eta} + \frac{1}{16}U_{\eta\eta}\u_{xx} &#x3D; -U_{\xi\xi}-\frac54U_{\xi\eta} - \frac{1}{4}U_{\eta\eta}\u_{xx} &#x3D; U_{\xi\xi}+2U_{\xi\eta} + U_{\eta\eta}\\end{gather}$$把小写 $u$ 全部替换成大写 $U$ 得：$$-\frac94U_{\xi\eta} +\frac34U_{\eta} &#x3D; 2$$即：$$U_{\xi\eta} &#x3D; \frac13U_{\eta} - \frac89$$"></a> <strong>解：</strong> 观察可得 $a &#x3D; 4, b&#x3D; \frac25, c&#x3D; 1$，$\delta &#x3D; b^2-ac&gt;0$。故有：<br> $$<br>4\left(\frac{\mathrm{d}y}{\mathrm{d}x}\right)^2 - 5\left(\frac{\mathrm{d}y}{\mathrm{d}x}\right) + 1 &#x3D; 0<br> $$<br> 解得：<br> $$<br>\frac{\mathrm{d}y}{\mathrm{d}x} &#x3D; 1 或 \frac14<br> $$<br>解 $\mathrm{d}x, \mathrm{d}y$ 的常微分方程，得：<br>$$<br>&#x3D; \frac14x+C 或 y &#x3D; x+C<br>$$<br>也即：<br>$$<br>C&#x3D; -\frac14x+y 或 C &#x3D; -x + y<br>$$<br>令 $\xi &#x3D; -\frac14x+y, \eta &#x3D; -x+y$ ，则 $u(x, y) &#x3D; U(y-x, y - \frac{x}{4})$。<br>$$<br>\frac{\partial u}{\partial x} &#x3D; \frac{\partial U}{\partial \xi}\frac{\partial \xi}{\partial x} + \frac{\partial U}{\partial\eta}\frac{\partial \eta}{\partial x} &#x3D; -U_{\xi} -\frac14 U_{\eta}<br>$$<br>同理可得：<br>$$<br>\begin{gather}<br>u_y &#x3D; U_{\xi} + U_{\eta}\<br>u_{xx} &#x3D; U_{\xi\xi}+\frac12U_{\xi\eta} + \frac{1}{16}U_{\eta\eta}\<br>u_{xx} &#x3D; -U_{\xi\xi}-\frac54U_{\xi\eta} - \frac{1}{4}U_{\eta\eta}\<br>u_{xx} &#x3D; U_{\xi\xi}+2U_{\xi\eta} + U_{\eta\eta}\<br>\end{gather}<br>$$<br>把小写 $u$ 全部替换成大写 $U$ 得：<br>$$<br>-\frac94U_{\xi\eta} +\frac34U_{\eta} &#x3D; 2<br>$$<br>即：<br>$$<br>U_{\xi\eta} &#x3D; \frac13U_{\eta} - \frac89<br>$$</h2><p>关于求解：先把上式写成：<br>$$<br>\left(U_{\eta}e^{-\frac13\xi}\right)_{\xi} &#x3D; -\frac89e^{-\frac13\xi}<br>$$<br>两边再积分：<br>$$<br>U &#x3D; \frac83\eta+e^{\frac{\xi}{3}}h(\eta) + g(\xi)<br>$$</p></details>          </div><blockquote><p><strong>一定要注意 $b$ 的含义有不同</strong>。原始的求根公式里的 b 对应应该是 $2b(x, y)$ 。</p></blockquote><h3 id="case2-delta-equiv0"><a href="#case2-delta-equiv0" class="headerlink" title="case2. $\delta\equiv0$"></a>case2. $\delta\equiv0$</h3><p><mark>前提： 在 $(x_0, y_0)$ 附近恒为 0</mark>，如果只是零点，不一定可以做下面的化简。</p><p>此时式 $\mathrm{(2.4.9)}$ 就成了 1 个方程，只能解出一个 $\varphi$ 。还是在 $(x_0, y_0)$ 处：<br>$$<br>\varphi_{1x} &#x3D; -\frac{\partial y(x_0)}{\partial x}, \quad \varphi_{1y} &#x3D; 1<br>$$<br>为了让 Jacobi 非零，<strong>主动取</strong> $\varphi_2 &#x3D; x$，此时 $A &#x3D; B &#x3D; 0$，从而式 $\mathrm{(2.4.4)}$ 写成：</p><p> $$<br> {\color{red}{\Huge U_{\eta\eta} }&#x3D; D_2U_{\xi} + E_2U_{\eta} + F_2U + G_2, \tag{2.4.11}}<br> $$</p><h3 id="case3-在-x-0-y-0-附近-delta"><a href="#case3-在-x-0-y-0-附近-delta" class="headerlink" title="case3. 在$(x_0, y_0)$ 附近 $\delta&lt;0$"></a>case3. 在$(x_0, y_0)$ 附近 $\delta&lt;0$</h3><p>此时式 $\mathrm{(2.4.9)}$ 可以看作 2 个方程（1 个实方程， 1 个虚方程）。考虑其中的一个方程（共轭，所以另一个类似），我们可以假设：<br>$$<br>y &#x3D; \Big[g(x)+C_1\Big] + \Big[h(x)+C_2\Big] i<br>$$</p><p>写成隐函数的形式：<br>$$<br>\varphi(x, y) &#x3D; C_1+iC_2 &#x3D; \underbrace{\Big[y-g(x)\Big]}<em>{\varphi_1} + \underbrace{\Big[-h(x)\Big]}</em>{\varphi_2}i<br>$$</p><p>根据复变函数的求导法则<a href="%E5%8F%82%E8%80%83%E4%BA%86%E5%A4%8D%E5%8F%98%E5%87%BD%E6%95%B0%E5%AF%BC%E6%95%B0%E7%9A%84%E5%AE%9A%E4%B9%89%EF%BC%8C%E4%BD%86%E4%BF%9D%E6%8C%81%E7%96%91%E9%97%AE%E3%80%82">^ref2</a>：</p><p>$$<br>\frac{\mathrm{d}y}{\mathrm{d}x} &#x3D; \frac{\mathrm{d}g(x)}{\mathrm{d}x} + i\frac{\mathrm{d}h(x)}{\mathrm{d}x}<br>$$<br>因而对于上面的式子：</p><p>$$<br>\begin{align}<br>\varphi_{1x} &amp;&#x3D; -\frac{\mathrm{d}g(x)}{\mathrm{d} x} &#x3D; \left(\frac{\mathrm{d}y}{\mathrm{d}x}\right)<em>{\mathrm{real}}\<br>\varphi</em>{1y} &amp;&#x3D; 1\<br>\varphi_{2x} &amp;&#x3D; -\frac{\mathrm{d}h(x)}{\mathrm{d}x} &#x3D; \left(\frac{\mathrm{d}y}{\mathrm{d}x}\right)<em>{\mathrm{image}}&#x3D;-\frac{\pm\sqrt{\delta}}{a}\<br>\varphi</em>{2y} &amp;&#x3D; 0<br>\end{align}<br>$$</p><blockquote><p>注：<br><br>有一点我没有太明白，PPT上这里是在 $(x_0, y_0)$ （or 在其邻域？）的时候得到的结果，我上面的推导正确吗？</p></blockquote><p>在之后的替换中，用 $\xi &#x3D; \varphi_1, \eta &#x3D; \varphi_2$，就可以得到 $A &#x3D; C \ne 0, B &#x3D; 0$，故式 $\mathrm{(2.4.4)}$ 写成：</p><p> $$<br> {\color{red}{\Huge U_{\xi\xi}+U_{\eta\eta} }&#x3D; D_3U_{\xi} + E_3U_{\eta} + F_3U + G_3, \tag{2.4.12}}<br> $$</p><blockquote><p>Q：为什么只考虑一个方程？<br><br>A：因为两个方程共轭。共轭只影响 $$\varphi&#x3D;\varphi_1{\color{red}\pm}\varphi_2i$$里红色的符号，最后替换为 $\xi, \eta$ 之后，我们也要实部虚部分开看。不影响结果。</p></blockquote><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>以之前的 $\delta$ 为分类标准（可以证明式 $\mathrm{(2.4.1)}$ 的 $\delta$ 和式 $\mathrm{(2.4.4)}$ 的 $\Delta$ 在 $Jacobi\ne 0$ 时符号相同）。</p><ul><li>$\delta&gt;0$ ：双曲型，其标准型为式 $\mathrm{(2.4.10)}$。</li><li>$\delta&#x3D;0$ ：抛物型，其标准型为式 $\mathrm{(2.4.11)}$。</li><li>$\delta&lt;0$ ：椭圆型，其标准型为式 $\mathrm{(2.4.12)}$。</li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>default</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从源码安装openFOAM</title>
    <link href="/posts/65f85108/"/>
    <url>/posts/65f85108/</url>
    
    <content type="html"><![CDATA[<h1 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h1><p>CentOS 7，无网络连接，无sudo权限</p><p>参考了官方网站的<a href="https://openfoam.org/download/source/">安装指南</a></p><h1 id="第1步，安装依赖"><a href="#第1步，安装依赖" class="headerlink" title="第1步，安装依赖"></a>第1步，安装依赖</h1><table><thead><tr><th>依赖包</th><th>版本</th><th>如何获取</th></tr></thead><tbody><tr><td>gcc</td><td>&gt;&#x3D;5.4</td><td><code>module load gnu</code></td></tr><tr><td>cmake</td><td>3.28.4</td><td></td></tr><tr><td>FLEX</td><td>2.6.4</td><td>从<a href="https://github.com/westes/flex/releases/tag/v2.6.4">github</a>上下载，或<a href="https://mirror.ghproxy.com/https://github.com/westes/flex/releases/download/v2.6.4/flex-2.6.4.tar.gz">点击直接下载</a></td></tr><tr><td>QT</td><td>5.12.2</td><td><a href="https://download.qt.io/archive/qt/5.12/5.12.2/">官方镜像站</a>，或<a href="https://download.qt.io/archive/qt/5.12/5.12.2/qt-opensource-linux-x64-5.12.2.run">点击直接下载</a></td></tr><tr><td>Git</td><td>1.8.3.1</td><td>系统已自带</td></tr><tr><td>OpenMPI</td><td>5.0.2</td><td><a href="https://www.open-mpi.org/software/ompi/v5.0/">官方下载</a>，或<a href="https://download.open-mpi.org/release/open-mpi/v5.0/openmpi-5.0.2.tar.gz">点击直接下载</a></td></tr></tbody></table><h2 id="安装FLEX-废弃"><a href="#安装FLEX-废弃" class="headerlink" title="安装FLEX-废弃"></a>安装FLEX-废弃</h2><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> flex-2.6.4.tar.gz<span class="token builtin class-name">cd</span> flex-2.6.4<span class="token assign-left variable">install_to</span><span class="token operator">=</span><span class="token string">"需要安装到的绝对路径"</span>./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span><span class="token variable">$&#123;install_to&#125;</span><span class="token function">make</span> check<span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$&#123;install_to&#125;</span>/bin:<span class="token variable">$&#123;<span class="token environment constant">PATH</span>&#125;</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token variable">$&#123;install_to&#125;</span>/lib:<span class="token variable">$&#123;LD_LIBRARY_PATH&#125;</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LIBRARY_PATH</span><span class="token operator">=</span><span class="token variable">$&#123;install_to&#125;</span>/lib:<span class="token variable">$&#123;LIBRARY_PATH&#125;</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CPATH</span><span class="token operator">=</span><span class="token variable">$&#123;install_to&#125;</span>/include:<span class="token variable">$&#123;CPATH&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="第2步，下载源码"><a href="#第2步，下载源码" class="headerlink" title="第2步，下载源码"></a>第2步，下载源码</h1><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://githubfast.com/OpenFOAM/OpenFOAM-11.git<span class="token function">git</span> clone https://githubfast.com/OpenFOAM/ThirdParty-11.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>官网上给的教程中，安装位置默认在<code>~/OpenFOAM/</code>下面，并且源码也在此目录中。<br>如果需要更改安装路径，就需要更改<code>FOAM_INIT_DIR</code>变量的值</p><p>正在核实中。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>openFOAM</tag>
      
      <tag>tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言中fork,exec和system函数的理解</title>
    <link href="/posts/321f/"/>
    <url>/posts/321f/</url>
    
    <content type="html"><![CDATA[<h1 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h1><p>用于创建子进程。</p><p>由fork创建的新进程被称为子进程（child process）。fork函数被调用一次，但返回两次。</p><ol><li>在父进程中，fork返回新创建子进程的进程ID。</li><li>在子进程中，fork返回0。</li><li>如果出现错误，fork返回一个负值。</li></ol><p>包含在<code>&lt;unistd.h&gt;</code>中，是Unix系统特有的文件(Mac os并不太清楚)，因此需要用<strong>gnu标准</strong>进行编译。</p><p>fork的作用是创建一个子进程。网上有不少博客，但其中有相当一部分并没有点明fork之后会怎么样。<br>实验证明：fork之后的子进程不是重新运行整个程序，而是<strong>从fork处接着向后运行</strong>。<br>比如下面的程序：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token keyword">char</span> cmd<span class="token punctuation">[</span><span class="token number">1023</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ch<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> status<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"before fork\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">pid_t</span> id<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"father: id=%d, cnt=%d\n"</span><span class="token punctuation">,</span>id<span class="token punctuation">,</span>cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\e[33mSon\e[0m\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\e[31mafter fork\e[0m\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// printf("finally: id=%d\n",id);</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>其结果应该如下：(父进程和子进程之间没有固定的先后顺序，看运气)<br><img src="https://mitnick-pic-1258691431.cos.ap-beijing.myqcloud.com/mitnick/pic/202404281552465.png"></p><p>如果画个进程运行图，应该是这样：</p><pre><code class="mermaid">%%&#123; init: &#123; 'flowchart': &#123; 'curve': 'linear' &#125; &#125; &#125;%%flowchart LRclassDef main <span class="token property">fill:#f96</span>classDef sub1 <span class="token property">fill:#56b800</span>classDef sub2 <span class="token property">fill:#7abceb</span>classDef sub3 <span class="token property">fill:#ebe01a</span>    root(root):::main-->a(fork)    a:::main-->c((dad)):::mainc-->d(fork):::maind-->e((dad)):::main    a-->b((son)):::sub1d-->f((son)):::sub2b-->g(fork):::sub1g-->h((subdad)):::sub1g-->i((son)):::sub3</code></pre><p>流程如下：</p><ol><li>程序从main进入，此时的身份我们假设为<font color=orange><b>root</b></font>。</li><li>当运行到<code>fork</code>时，产生一个子进程<font color=#56b800><b>sub1</b></font>(此时<code>cnt=1</code>)。<br>两个进程都向后运行。父进程无其它输出，子进程输出<code>Son</code></li><li><font color=orange><b>root</b></font>和<font color=#56b800><b>sub1</b></font>都进入下一轮循环，<br>此时<code>cnt=2</code>。这意味着<font color=orange><b>root</b></font>和<font color=#56b800><b>sub1</b></font>都会进行一次<code>fork</code>，<br>分别产生<font color=#ebe01a><b>sub2</b></font>和<font color=#7abceb><b>sub3</b></font>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下常见的环境变量对应的目录</title>
    <link href="/posts/1df8ddf2/"/>
    <url>/posts/1df8ddf2/</url>
    
    <content type="html"><![CDATA[<h1 id="环境变量作用"><a href="#环境变量作用" class="headerlink" title="环境变量作用"></a>环境变量作用</h1><table><thead><tr><th>环境变量</th><th>作用</th></tr></thead><tbody><tr><td><code>ACLOCAL</code></td><td>在GNU automake套件中起作用。对应各个软件里的<code>share/aclocal</code>目录</td></tr><tr><td><code>PATH</code></td><td>可执行程序的目录。</td></tr><tr><td><code>PKG_CONFIG_PATH</code></td><td>作用见后文，对应软件里的<code>lib/pkgconfig</code>或<code>share/pkgconfig</code>目录</td></tr><tr><td><code>LD_LIBRARY_PATH</code></td><td>主要是用于指定动态链接器（ld）查找ELF可执行文件运行时所依赖的动态库（so）的路径。即用于在程序运行期间查找动态链接库时，指定除了系统默认路径(&#x2F;usr&#x2F;lib)之外的路径。对应<code>lib</code>目录</td></tr><tr><td><code>LIBRARY_PATH</code></td><td>在程序编译期间查找动态链接库时指定的查找共享库的路径。指定gcc编译需要链接动态链接库的目录。</td></tr><tr><td><code>CPATH</code></td><td>CPATH 环境变量用于 C&#x2F;C++ 预处理，它列出了预处理器检索 C&#x2F;C++ 头文件的目录，与之相对的环境变量还有 C_INCLUDE_PATH、CPLUS_INCLUDE_PATH 和 OBJC_INCLUDE_PATH。其中无论预处理哪种语言，都会使用 CPATH 环境变量，而其余的三种环境变量仅在预处理指定的语言时才会适用。</td></tr></tbody></table><p>以下部分来自于<a href="https://blog.csdn.net/qq_36182852/article/details/109680418">https://blog.csdn.net/qq_36182852/article/details/109680418</a></p><blockquote><p><code>PKG-CONFIG</code>用来检索系统中安装库文件的信息。典型的是用作库的编译和连接。<br>一般来说，如果库的头文件不在&#x2F;usr&#x2F;include目录中，那么在编译的时候需要用<code>-I</code>参数指定其路径。<br>由于同一个库在不同系统上可能位于不同的目录下，用户安装库的时候也可以将库安装在不同的目录下，<br>所以即使使用同一个库，由于库的路径的不同，<br>造成了用<code>-I</code>参数指定的头文件的路径和在连接时使用<code>-L</code>参数指定lib库的路径都可能不同，<br>其结果就是造成了编译命令界面的不统一。可能由于编译，连接的不一致，<br>造成同一份程序从一台机器copy到另一台机器时就可能会出现问题。</p><p><code>PKG-CONFIG</code>就是用来解决编译连接界面不统一问题的一个工具。<br>它的基本思想：<code>PKG-CONFIG</code>是通过库提供的一个<code>.pc</code>文件获得库的各种必要信息，<br>包括版本信息、编译和连接需要的参数等。<br>需要的时候可以通过pkg-config提供的参数(–cflags, –libs)，将所需信息提取出来供编译和连接使用。<br>这样，不管库文件安装在哪，通过库对应的.pc文件就可以准确定位，<br>可以使用相同的编译和连接命令，使得编译和连接界面统一。</p><p>它提供的主要功能有:</p><ol><li>检查库的版本号。如果所需库的版本不满足要求，打印出错误信息，避免连接错误版本的库文件。</li><li>获得编译预处理参数，如宏定义，头文件的路径。</li><li>获得编译参数，如库及其依赖的其他库的位置，文件名及其他一些连接参数。</li><li>自动加入所依赖的其他库的设置。</li></ol></blockquote><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://blog.csdn.net/qq_36182852/article/details/109680418">【Linux】PKG_CONFIG_PATH: https://blog.csdn.net/qq_36182852&#x2F;article&#x2F;details&#x2F;109680418</a></li><li><a href="https://e-ffen.com/2021/11/30/PATH_CPATH_LIBRARY_PATH/">Linux 环境变量 PATH、CPATH、LIBRARY_PATH和LD_LIBRARY_PATH</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>tips</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从源码安装Tmux</title>
    <link href="/posts/5d529438/"/>
    <url>/posts/5d529438/</url>
    
    <content type="html"><![CDATA[<h1 id="1-相关环境"><a href="#1-相关环境" class="headerlink" title="1. 相关环境"></a>1. 相关环境</h1><ul><li>系统：CentOS 7.6 (<font color=red><b>无网，无sudo</b></font>)</li><li>tmux：3.5</li><li>ncurses：6.2</li><li>libevent：2.1.2-stable</li></ul><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h1><h2 id="2-1-安装libevent"><a href="#2-1-安装libevent" class="headerlink" title="2.1 安装libevent"></a>2.1 安装libevent</h2><p>在我安装的服务器上并没有libevent，需要手动进行安装。</p><p>下载<code>libevent-2.1.12-stable.tar.gz</code>，解压之后进行目录，正常地用configure安装：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> libevent-2.1.12-stable.tar.gz<span class="token builtin class-name">cd</span> libevent-2.1.12-stable./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;program&#125;</span>/libevent"</span><span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token comment"># 不带具体的数字，会自动达到最大数</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>安装完成后，相当重要的一点在于设置环境变量，这是手动安装软件所带来的麻烦之处。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;program&#125;</span>/libevent/lib:<span class="token variable">$LD_LIBRARY_PATH</span>"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">PKG_CONFIG_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;program&#125;</span>/libevent/lib/pkgconfig:<span class="token variable">$PKG_CONFIG_PATH</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="2-2-安装ncurses"><a href="#2-2-安装ncurses" class="headerlink" title="2.2 安装ncurses"></a>2.2 安装ncurses</h2><p>服务器比较老，连<code>ncurses</code>也没有安装，需要我们手动装一下。</p><p>下载<code>ncurses-6.2.tar.gz</code>，解压之后进行目录，正常地用configure安装：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> ncurses-6.2.tar.gz<span class="token builtin class-name">cd</span> ncurses-6.2./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;program&#125;</span>/ncurses"</span><span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token comment"># 不带具体的数字，会自动达到最大数</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>ncurses如果手动安装，不会产生<code>pkgconfig</code>，需要我们自己手写<code>ncurses.pc</code>。</p><p>如下为手写的<code>ncurses.pc</code>： <mark>路径需要用绝对路径</mark></p><figure><div class="code-wrapper"><pre class="line-numbers language-pkgconfig" data-language="pkgconfig"><code class="language-pkgconfig">Name: ncursesDescription:ncursesVersion: 6.2Cflags:-I&#x2F;your-path-to-ncurses&#x2F;include&#x2F;ncurses -I&#x2F;your-path-to-ncurses&#x2F;includeLibs:-L&#x2F;your-path-to-ncurses&#x2F;lib -lncurses -lncurses++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>此后，需要把<code>ncurses.pc</code>加入环境变量<code>PKG_CONFIG_PATH</code>中。</p><h2 id="2-3-安装tmux"><a href="#2-3-安装tmux" class="headerlink" title="2.3 安装tmux"></a>2.3 安装tmux</h2><p>此后就可以正常安装tmux了。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>instruction</tag>
      
      <tag>tmux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>.bashrc改不改</title>
    <link href="/posts/7a37d6c9/"/>
    <url>/posts/7a37d6c9/</url>
    
    <content type="html"><![CDATA[<h1 id="bashrc干什么"><a href="#bashrc干什么" class="headerlink" title=".bashrc干什么"></a>.bashrc干什么</h1><p>我们谈论的是Linux系统。Unix类系统也可以参考，但Windows系统就别看了。</p><p>如果我们用<code>ls -a</code>命令查看用户主目录下的文件，我们可以发现有4个带”bash”的文件：</p><ul><li><code>.bashrc</code>：非登录Session初始化时执行的配置。</li><li><code>.bash_profile</code>：登录Session初始化时执行的配置。</li><li><code>.bash_logout</code>：退出bash shell时运行的脚本。可能为空，也可能有一些内容。</li><li><code>.bash_history</code>：bash输入命令的历史记录。</li></ul><p>登录 Session 是用户登录系统以后，系统为用户开启的原始 Session，通常需要用户输入用户名和密码进行登录。</p><p>而非登录 Session 是用户进入系统以后，手动新建的 Session，这时不会进行环境初始化。比如，在命令行执行bash命令，就会新建一个非登录 Session。</p><p>当然，这里我说的都只是用户的配置文件，在加载用户的配置文件之间会先加载系统的配置文件。<br>更详细的知识见<a href="https://www.bookstack.cn/read/bash-tutorial/docs-startup.md">阮一峰Bash脚本教程</a>。<br>如果画一个简单的图，就是这样：</p><pre><code class="mermaid">%%&#123; init: &#123; 'flowchart': &#123; 'curve': 'basis' &#125; &#125; &#125;%%flowchart TB    classDef main <span class="token property">fill:#f96</span>    a[登录类Session]-->b["/etc/profile"]    b-->|最后运行|e["~/.bash_profile"]subgraph ide2 [用户层面]    e-->f("~/.bashrc")end    subgraph ide1 [系统层面]    direction BT    b-->|先运行|c["/etc/bash.bashrc"]    b-->|后运行|d[("/etc/profile.d目录下所有文件")]    end        style ide2 <span class="token property">fill:#f0e518, font-size:12</span></code></pre><pre><code class="mermaid" >%%{ init: { 'flowchart': { 'curve': 'basis' } } }%%flowchart TBclassDef main fill:#f96a[登录类Session]-->b["/etc/profile"]b-->|最后运行|e["~/.bash_profile"]subgraph ide2 [用户层面]e-->f("~/.bashrc")endsubgraph ide1 [系统层面]direction BTb-->|先运行|c["/etc/bash.bashrc"]b-->|后运行|d[("/etc/profile.d目录下所有文件")]endstyle ide2 fill:#f0e518, font-size:12</code></pre><h1 id="该不该直接改-bashrc"><a href="#该不该直接改-bashrc" class="headerlink" title="该不该直接改.bashrc"></a>该不该直接改.bashrc</h1><p>如果要加环境变量，网上一般是让改<code>.bashrc</code>。为什么？因为在<code>.bash_profile</code>里一般是引用了<code>.bashrc</code>的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># .bash_profile</span><span class="token comment"># Get the aliases and functions</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span>  ~/.bashrc <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">.</span> ~/.bashrc<span class="token keyword">fi</span><span class="token comment"># User specific environment and startup programs</span><span class="token assign-left variable">PTAH</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PATH</span>:<span class="token environment constant">$HOME</span>/.local/bin:<span class="token environment constant">$HOME</span>/bin"</span><span class="token builtin class-name">export</span> <span class="token environment constant">PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这也就带来了一个问题，如果直接改<code>.bashrc</code>，一旦改出了一些严重的问题，就可能导致无法登录的情况。所以不推荐直接改<code>.bashrc</code></p><p>那么，有没有安全一点的方法？</p><h1 id="更安全的方法"><a href="#更安全的方法" class="headerlink" title="更安全的方法"></a>更安全的方法</h1><p>当然有，只不过可能有点麻烦。</p><!-- ## 1. 最安全，修改简单，使用麻烦 --><p>不去修改<code>.bashrc</code>，而是把你需要的环境变量什么的写到一个新的文件里。每次需要运行的时候，<code>source</code>你新写的那个文件。</p><p>比如我需要加一些环境变量。那么我把环境变量写到一个叫作<code>.mybashrc</code>的全新的文件里。然后<strong>每次</strong>我登录的时候，就执行：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> .mybashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>最安全，因为根本没有改<code>.bashrc</code>、<code>.bash_profile</code>。而且如果你改的环境变量有问题，退出之后重新登录就好了。</p><p>只不过有点麻烦，因为每次登录都需要<code>source</code>一下。</p><p>鱼和熊掌不可兼得，要安全只能牺牲方便。</p><h2 id="牺牲一小点安全的折中方法"><a href="#牺牲一小点安全的折中方法" class="headerlink" title="牺牲一小点安全的折中方法"></a>牺牲一小点安全的折中方法</h2><p><strong>注：</strong><font color=red><b>做下面的操作时一定要写对</b></font></p><p>有一个折中的方法，就是在<code>.bash_profile</code>里加入判断逻辑，每次登录时选择一下是否运行<code>.bashrc</code>。比如在<code>.bash_profile</code>末尾加入这些指令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">read</span> <span class="token parameter variable">-t</span> <span class="token number">10</span> <span class="token parameter variable">-p</span> <span class="token string">"10秒倒计时，是否载入.bashrc? [Y/n]: "</span> var<span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token variable">$&#123;var<span class="token operator">:-</span>"yes"&#125;</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$&#123;var<span class="token operator">,,</span>&#125;</span> <span class="token operator">==</span> <span class="token string">"yes"</span> <span class="token operator">||</span> <span class="token variable">$&#123;var<span class="token operator">,,</span>&#125;</span> <span class="token operator">==</span> <span class="token string">"y"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"载入中"</span>    <span class="token builtin class-name">source</span> ~/.bashrc<span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"取消载入"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这样如果出问题，就有更改的余地。</p><p><code>tmux</code>默认开启的是登录shell (login shell) ，可以通过在<code>.tmux.conf</code>文件里加入这条设置来改变：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> <span class="token parameter variable">-g</span> default-command <span class="token function">bash</span><span class="token comment"># 或者这条：</span>set-option <span class="token parameter variable">-g</span> default-shell <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>（但你这不是需要改<code>.bash_profile</code>文件吗？</p><p>（所以这段只针对有一定能力的人</p><h1 id="一些杂谈"><a href="#一些杂谈" class="headerlink" title="一些杂谈"></a>一些杂谈</h1><p><a href="https://blog.csdn.net/wuyujin1997/article/details/104663726">bashrc中的rc是什么含义？</a></p>]]></content>
    
    
    <categories>
      
      <category>article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PRESTO的配置（高算版）</title>
    <link href="/posts/3da3d5a5/"/>
    <url>/posts/3da3d5a5/</url>
    
    <content type="html"><![CDATA[<p>作者为：левский Уильямс</p><h1 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h1><p>在配置安装的时候，<font color=red><b>没有load任何的Module</b></font>。<br>如果在此之前有导入过任何的模块（用<code>module list</code>查看已导入的模块），请<strong>全部卸载</strong>。</p><p>保证gcc是4.8.5版本的。</p><p>需要下载如下的工具：</p><ol><li><a href="http://www.fftw.org/fftw-3.3.9.tar.gz">fftw-3.3.9</a> (点击下载)</li><li><a href="ftp://ftp.astro.caltech.edu/pub/pgplot/pgplot5.2.tar.gz">pgplot5.2</a> (点击下载，有点慢)</li><li><a href="https://master.dl.sourceforge.net/project/tempo/tempo-13.103.tar.gz?viasf=1">tempo</a> (点击下载)</li><li><a href="http://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio-4.0.0.tar.gz">cfitsio-4.0.0</a> (点击下载) (<strong>注意其大小只有4M左右，如果不是4M左右肯定是下错了</strong>)</li><li><a href="https://doget-api.oopscloud.xyz/api/download?token=eyJhbGciOiJIUzI1NiJ9.eyJ1cmwiOiJodHRwczovL2dpdGh1Yi5jb20vc2NvdHRyYW5zb20vcHJlc3RvL2FyY2hpdmUvcmVmcy90YWdzL3Y0LjAudGFyLmd6In0.Tc1zVQgm7_7s_F3641l2uBFWzNCjlS8e0UDrVHrOfR8">presto</a> (点击下载)</li></ol><p>数据集下载如下：</p><p><a href="http://www.cv.nrao.edu/~sransom/GBT_Lband_PSR.fil">GBT_Lband_PSR.fil</a></p><blockquote><p>**注：**如果想自己下载，可以参考下面的链接</p><p>fftw-3.3.9</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://www.fftw.org/fftw-3.3.9.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>pgplot：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> ftp://ftp.astro.caltech.edu/pub/pgplot/pgplot5.2.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>tempo：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git://git.code.sf.net/p/tempo/tempo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>cfitsio</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio-4.0.0.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>presto</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">git clone git:&#x2F;&#x2F;github.com&#x2F;scottransom&#x2F;presto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure></blockquote><p>网络方面的问题请自己想办法(ง •_•)ง</p><h2 id="需要会的基本命令与操作"><a href="#需要会的基本命令与操作" class="headerlink" title="需要会的基本命令与操作"></a>需要会的基本命令与操作</h2><ul><li><font color=Red><b>vim</b></font>：<a href="https://www.runoob.com/linux/linux-vim.html">点击学习</a></li><li><font color=Red><b>Linux下路径的基本操作</b></font>：<a href="https://blog.csdn.net/dghfttgv/article/details/107808158">点击学习</a></li><li>Bash中的变量：<a href="https://www.runoob.com/linux/linux-shell-variable.html">了解</a>，<br><a href="https://zhuanlan.zhihu.com/p/440108529#:~:text=%E5%8F%98%E9%87%8F%E6%98%AF%E4%BB%BB%E4%BD%95%E4%B8%80%E7%A7%8D%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%83%BD%E5%BF%85%E4%B8%8D%E5%8F%AF%E5%B0%91%E7%9A%84%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%EF%BC%8C%E5%8F%98%E9%87%8F%E7%94%A8%E6%9D%A5%E5%AD%98%E6%94%BE%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E3%80%82%20%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E5%9C%A8%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E6%97%B6%E9%80%9A%E5%B8%B8%E4%B8%8D%E9%9C%80%E8%A6%81%E6%8C%87%E6%98%8E%E7%B1%BB%E5%9E%8B%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%B5%8B%E5%80%BC%E5%B0%B1%E5%8F%AF%E4%BB%A5%EF%BC%8CShell%20%E5%8F%98%E9%87%8F%E4%B9%9F%E9%81%B5%E5%BE%AA%E8%BF%99%E4%B8%AA%E8%A7%84%E5%88%99%E3%80%82%20%E5%9C%A8%20Bash,shell%20%E4%B8%AD%EF%BC%8C%E6%AF%8F%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%E9%83%BD%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E6%97%A0%E8%AE%BA%E4%BD%A0%E7%BB%99%E5%8F%98%E9%87%8F%E8%B5%8B%E5%80%BC%E6%97%B6%E6%9C%89%E6%B2%A1%E6%9C%89%E4%BD%BF%E7%94%A8%E5%BC%95%E5%8F%B7%EF%BC%8C%E5%80%BC%E9%83%BD%E4%BC%9A%E4%BB%A5%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%BD%A2%E5%BC%8F%E5%AD%98%E5%82%A8%E3%80%82%20%E8%BF%99%E6%84%8F%E5%91%B3%E7%9D%80%EF%BC%8CBash%20shell%20%E5%9C%A8%E9%BB%98%E8%AE%A4%E6%83%85%E5%86%B5%E4%B8%8B%E4%B8%8D%E4%BC%9A%E5%8C%BA%E5%88%86%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%8D%B3%E4%BD%BF%E4%BD%A0%E5%B0%86%E6%95%B4%E6%95%B0%E5%92%8C%E5%B0%8F%E6%95%B0%E8%B5%8B%E5%80%BC%E7%BB%99%E5%8F%98%E9%87%8F%EF%BC%8C%E5%AE%83%E4%BB%AC%E4%B9%9F%E4%BC%9A%E8%A2%AB%E8%A7%86%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%8C%E8%BF%99%E4%B8%80%E7%82%B9%E5%92%8C%E5%A4%A7%E9%83%A8%E5%88%86%E7%9A%84%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%B8%8D%E5%90%8C%E3%80%82">了解2</a></li><li><font color=Red><b>如何添加环境变量</b></font>：<a href="https://blog.csdn.net/liumiaocn/article/details/103287475">点击学习</a></li><li>make如何工作：<a href="https://blog.csdn.net/qq_45544223/article/details/106857018#:~:text=%E4%B8%89%E3%80%81%20make%20%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%201%20make%20%E4%BC%9A%E5%9C%A8%E5%BD%93%20%E5%89%8D%E7%9B%AE%E5%BD%95%E4%B8%8B%20%E6%89%BE%E5%90%8D%E5%AD%97%E5%8F%AB%E2%80%9CMakefile%E2%80%9D%E6%88%96%E2%80%9Cmakefile%E2%80%9D%E7%9A%84%E6%96%87%E4%BB%B6%E3%80%82,%E6%96%87%E4%BB%B6%E4%B9%9F%E5%AD%98%E5%9C%A8%EF%BC%8C%E9%82%A3%E4%B9%88%20make%20%E4%BC%9A%20%E5%9C%A8%E5%BD%93%E5%89%8D%E6%96%87%E4%BB%B6%E4%B8%AD%E6%89%BE%E7%9B%AE%E6%A0%87%E4%B8%BA.o%20%E6%96%87%E4%BB%B6%E7%9A%84%E4%BE%9D%E8%B5%96%E6%80%A7%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%89%BE%E5%88%B0%E5%88%99%E5%86%8D%E6%A0%B9%E6%8D%AE%E9%82%A3%E4%B8%80%E4%B8%AA%E8%A7%84%E5%88%99%E7%94%9F%E6%88%90.o%20%E6%96%87%E4%BB%B6%20%E3%80%82%20%E6%9B%B4%E5%A4%9A%E9%A1%B9%E7%9B%AE">了解</a></li></ul><h1 id="二、正式安装"><a href="#二、正式安装" class="headerlink" title="二、正式安装"></a>二、正式安装</h1><p>再强调一遍，在配置安装的时候，<font color=red><b>没有load任何的Module</b></font>。<br>如果在此之前有导入过任何的模块（用<code>module list</code>查看已导入的模块），请<strong>全部卸载</strong>。</p><p>在正式安装之前，我建议把源码目录和安装目录分开，像下面这样的一个文件树是比较推荐的。</p><p><font color=red><b>之后所有的指令都是基于下面这个文件结构来的。</b></font></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~ <span class="token comment"># 用户根目录</span>├── Data <span class="token comment"># 数据集存放目录</span>│   └── GBT_Lband_PSR.fil├── Downloads <span class="token comment"># 源码目录</span>│   ├── cfitsio│   ├── fftw│   ├── pgplot│   ├── presto│   └── tempo└── Program_Files <span class="token comment"># 安装目录</span>    ├── cfitsio    ├── fftw    ├── pgplot    ├── presto    └── tempo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>也就是说，需要在用户根目录下(<code>~</code>)新建3个文件夹：<code>Data</code>、<code>Downloads</code>、<code>Program_Files</code>相。<br>新建完之后，需要在安装目录里(<code>Program_Files</code>)新建5个文件夹。</p><p>在上面这个文件目录下，需要添加的环境变量如下：(如果看不懂没关系，那就<strong>先跳到下面正式安装部分</strong>)</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$LD_LIBRARY_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/fftw/lib/"</span> <span class="token comment"># 这里$&#123;HOME&#125;是你用户的根目录</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">PKG_CONFIG_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$PKG_CONFIG_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/fftw/lib/pkgconfig"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/fftw/bin"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">C_INCLUDE_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$C_INCLUDE_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/fftw/include"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CPLUS_INCLUDE_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CPLUS_INCLUDE_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/fftw/include"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">PGPLOT_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/pgplot/"</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$LD_LIBRARY_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/pgplot/"</span>   <span class="token comment"># 注意：没有lib的子文件夹</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">PKG_CONFIG_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$PKG_CONFIG_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/pgplot/lib/pkgconfig"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">PKG_CONFIG_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$PKG_CONFIG_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/tempo/lib/pkgconfig"</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">TEMPO</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/tempo"</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">PKG_CONFIG_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$PKG_CONFIG_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/cfitsio/lib/pkgconfig"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$LD_LIBRARY_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/cfitsio/lib"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">PRESTO</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Downloads/presto/"</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$LD_LIBRARY_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Downloads/presto/lib"</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Downloads/presto/bin"</span> <span class="token comment"># 注意，这条是在源码目录下！！！</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">C_INCLUDE_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$C_INCLUDE_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/presto/include"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CPLUS_INCLUDE_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CPLUS_INCLUDE_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/presto/include"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p><strong>注：</strong> <font color=red><b>直接加在<code>~/.bashrc</code>里有风险，可以参考： <a href="/posts/7a37d6c9/" title=".bashrc改不改">bashrc改不改?</a></b></font></p></blockquote><h2 id="1-fftw安装"><a href="#1-fftw安装" class="headerlink" title="1.fftw安装"></a>1.fftw安装</h2><h3 id="fftw-第1步：安装"><a href="#fftw-第1步：安装" class="headerlink" title="fftw.第1步：安装"></a>fftw.第1步：安装</h3><p>进入fftw的源码根目录，然后依次执行如下命令：（如果不知道源码根目录在哪里，看看上面。）</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure --enable-shared --enable-single <span class="token parameter variable">--prefix</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/fftw"</span><span class="token function">make</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>通常来说，第1个安装包的安装都是顺利的。</p><blockquote><p>有几点需要说明：</p><ol><li>此处用<code>make -j4</code>可能会报错。<strong>如果执行make报错，就执行一下<code>make clean</code>，清理掉编译错误的文件之后再执行<code>make</code></strong></li></ol></blockquote><h3 id="fftw-第2步：添加环境变量"><a href="#fftw-第2步：添加环境变量" class="headerlink" title="fftw.第2步：添加环境变量"></a>fftw.第2步：添加环境变量</h3><p>加入环境变量<br>直接在终端里执行下面的指令，仅当前shell有效，退出或者重连之后就失效。<br>而我们需要环境变量一直存在，因此把下面的指令追加到<code>~/.bashrc</code>文件末尾 <a href="%E7%9B%B4%E6%8E%A5%E5%8A%A0%E5%9C%A8%60~/.bashrc%60%E9%87%8C%E6%9C%89%E9%A3%8E%E9%99%A9%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%82%E8%80%83%E6%88%91%E7%9A%84%E5%8F%A6%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%9A%5Bbashrc%E6%94%B9%E4%B8%8D%E6%94%B9%5D(../7a37d6c9/)">^note</a></p><p>然后再重新载入<code>.bashrc</code>（重新载入需要在终端里执行<code>source ~/.bashrc</code>）</p><p>具体来说，就是：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 第1步，打开.bashrc</span><span class="token function">vim</span> ~/.bashrc   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 第2步，把如下行加到.bashrc的末尾</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$LD_LIBRARY_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/fftw/lib/"</span> <span class="token comment"># 这里$&#123;HOME&#125;是你用户的根目录</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">PKG_CONFIG_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$PKG_CONFIG_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/fftw/lib/pkgconfig"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/fftw/bin"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">C_INCLUDE_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$C_INCLUDE_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/fftw/include"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">C_INCLUDE_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$C_INCLUDE_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/presto/include"</span><span class="token comment"># 如果写在~/.bashrc里，记得source ~/.bashrc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 第3步，重新载入.bashrc</span><span class="token builtin class-name">source</span> ~/.bashrc   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="2-pgplot的安装"><a href="#2-pgplot的安装" class="headerlink" title="2.pgplot的安装"></a>2.pgplot的安装</h2><h3 id="pgplot-第1步：移动1个文件到安装目录"><a href="#pgplot-第1步：移动1个文件到安装目录" class="headerlink" title="pgplot.第1步：移动1个文件到安装目录"></a>pgplot.第1步：移动1个文件到安装目录</h3><p><mark>现在请切换到pgplot的源码根目录(<code>~/Downloads/pgplot</code>)</mark></p><p>执行下面的命令以备份相关文件</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">##### 如果想直接复制粘贴，请确保你当前的目录是pgplot的源码的根目录!</span><span class="token function">cp</span> drivers.list ~/Program_Files/pgplot/drivers.list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="pgplot-第2步：修改3个文件"><a href="#pgplot-第2步：修改3个文件" class="headerlink" title="pgplot.第2步：修改3个文件"></a>pgplot.第2步：修改3个文件</h3><p>用vim打开安装目录下<code>~/Program_Files/pgplot</code>下面的<code>drivers.list</code>文件，也就是执行<code>vim drivers.list</code>，然后把下面这几行前面的<code>!</code>去掉</p><figure><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"># 去掉这几行前面的感叹号　  GIDRIV <span class="token number">1</span> <span class="token operator">/</span>GIF GIF<span class="token operator">-</span>format <span class="token keyword">file</span><span class="token punctuation">,</span> landscape                            # line <span class="token number">19</span>　　GIDRIV <span class="token number">2</span> <span class="token operator">/</span>VGIF GIF<span class="token operator">-</span>format <span class="token keyword">file</span><span class="token punctuation">,</span> portrait                            # line <span class="token number">20</span>　　NUDRIV <span class="token number">0</span> <span class="token operator">/</span>NULL Null device <span class="token punctuation">(</span>no output<span class="token punctuation">)</span> Std F77                      # line <span class="token number">38</span>　　PSDRIV <span class="token number">1</span> <span class="token operator">/</span>PS PostScript printers<span class="token punctuation">,</span> monochrome<span class="token punctuation">,</span> landscape Std F77     # line <span class="token number">44</span>　　PSDRIV <span class="token number">2</span> <span class="token operator">/</span>VPS Postscript printers<span class="token punctuation">,</span> monochrome<span class="token punctuation">,</span> portrait Std F77     # line <span class="token number">45</span>　　PSDRIV <span class="token number">3</span> <span class="token operator">/</span>CPS PostScript printers<span class="token punctuation">,</span> color<span class="token punctuation">,</span> landscape Std F77         # line <span class="token number">46</span>　　PSDRIV <span class="token number">4</span> <span class="token operator">/</span>VCPS PostScript printers<span class="token punctuation">,</span> color<span class="token punctuation">,</span> portrait Std F77         # line <span class="token number">47</span>　　XWDRIV <span class="token number">1</span> <span class="token operator">/</span>XWINDOW Workstations running <span class="token keyword">X</span> Window System C            # line <span class="token number">71</span>　　XWDRIV <span class="token number">2</span> <span class="token operator">/</span>XSERVE Persistent <span class="token builtin">window</span> <span class="token keyword">on</span> <span class="token keyword">X</span> Window System C             # line <span class="token number">72</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后保存并退出——<code>:wq</code></p><p>用vim打开<code>~/Downloads/pgplot/src/grpckg1.inc</code>文件，然后对第29行作如下修改</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Replace " PARAMETER (GRIMAX = 8) " in line 29</span><span class="token comment">#    by   " PARAMETER (GRIMAX = 32) "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>然后保存并退出——<code>:wq</code></p><p>用vim打开<code>~/Downloads/pgplot/src/pgplot.inc</code>文件，然后对第7行作如下修改</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Replace " PARAMETER (PGMAXD=8) " in line 7</span><span class="token comment">#    by   " PARAMETER (PGMAXD=32) "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>然后保存并退出——<code>:wq</code></p><h3 id="pgplot-第3步：安装前的配置"><a href="#pgplot-第3步：安装前的配置" class="headerlink" title="pgplot.第3步：安装前的配置"></a>pgplot.第3步：安装前的配置</h3><p><mark>现在请切换到pgplot的安装目录(<code>~/Program_Files/pgplot</code>)</mark></p><p>在安装目录运行位于源码目录里的<code>makemake</code>，并执行2遍。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 目录结构见本文开头</span>~/Downloads/pgplot/makemake ~/Downloads/pgplot linux g77_gcc~/Downloads/pgplot/makemake ~/Downloads/pgplot linux g77_gcc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p><strong>注：</strong></p><p>上面的命令是可以正常执行的。不要看见<code>makemake</code>前面有一堆路径就觉得这个写的有问题。<br>只需要把对应文件的路径换成你自己的路径。</p><p>如果报错说<code>Permission denied</code>，说明你的<code>makemake</code>没有可执行权限。执行下面的指令以加上：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x ~/Downloads/pgplot/makemake<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如遇其它文件没有权限，类似处理。</p></blockquote><p>执行完毕之后<strong>安装目录下</strong>会出现如下的文件：（如果你安装文件夹和我开头写的是一样的结构的话）</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">drivers.list   grexec.f   grpckg1.inc   makefile   pgplot.inc   rgb.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后更改<code>makefile</code>文件的第25和第26行</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Replace "FCOMPL=g77"       in line 25 </span><span class="token comment">#   by    "FCOMPL=gfortran" </span><span class="token comment"># </span><span class="token comment"># Replace "FFLAGC=-u -Wall -fPIC -O" in line 26</span><span class="token comment">#   by    "FFLAGC=-ffixed-form -ffixed-line-length-none -u -Wall -fPIC -O"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="pgplot-第4步，安装"><a href="#pgplot-第4步，安装" class="headerlink" title="pgplot.第4步，安装"></a>pgplot.第4步，安装</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在安装目录下执行</span><span class="token function">make</span><span class="token function">make</span> cpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>如果<code>make</code>报错，<code>make clean</code>之后再运行一次试试。</p><blockquote><p><strong>注：</strong> 如果需要编译<code>pgplot.html</code>，需要更改<code>~/Downloads/pgplot/makehtml</code>文件。只需要把第1行替换为这个：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/perl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>然后：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在安装目录下执行</span><span class="token function">make</span> pgplot.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></blockquote><h3 id="pgplot-第5步，添加环境变量"><a href="#pgplot-第5步，添加环境变量" class="headerlink" title="pgplot.第5步，添加环境变量"></a>pgplot.第5步，添加环境变量</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PGPLOT_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/pgplot/"</span> <span class="token comment"># 记得替换USER为自己的用户名</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$LD_LIBRARY_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/pgplot/"</span>   <span class="token comment"># 注意：没有lib的子文件夹</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">PKG_CONFIG_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$PKG_CONFIG_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/pgplot/lib/pkgconfig"</span><span class="token comment"># 如果写在~/.bashrc里，记得source ~/.bashrc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p><strong>注：</strong></p><p>pgplot有一些demo可以运行。只需要切换到安装目录，运行<code>./pgdemo1</code>，弹出如下信息可说明pgplot正常安装</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Graphcs device/type <span class="token punctuation">(</span>? to see list, default /Xserve<span class="token punctuation">)</span>:<span class="token comment"># 或 Graphcs device/type (? to see list, default /NULL):</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure></blockquote><h2 id="3-Tempo安装"><a href="#3-Tempo安装" class="headerlink" title="3.Tempo安装"></a>3.Tempo安装</h2><h3 id="tempo-第1步：安装前的准备"><a href="#tempo-第1步：安装前的准备" class="headerlink" title="tempo.第1步：安装前的准备"></a>tempo.第1步：安装前的准备</h3><p><mark>现在请切换到Tempo的源码根目录(<code>~/Downloads/tempo</code>)</mark></p><p>可以尝试运行源码根目录下的<code>prepare</code>，像这样：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./prepare   <span class="token comment"># 一般无法正常运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果可以正常工作，就跳到下一步，否则就<strong>别执行那个prepare了</strong>，改成执行如下的操作：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">autoreconf <span class="token parameter variable">--install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>另外需要把<code>./src/get_version_id.sh</code>加上执行权限，并把它的file format改成Unix。（用下面的<code>dos2unix</code>，服务器上自带）</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x ./src/get_version_id.shdos2unix ./src/get_version_id.shdos2unix ./configure.ac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="tempo-第2步：正式安装"><a href="#tempo-第2步：正式安装" class="headerlink" title="tempo.第2步：正式安装"></a>tempo.第2步：正式安装</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/tempo"</span><span class="token function">make</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p><strong>注：</strong></p><p>如果之间那步没有把<code>configure.ac</code>转换成unix格式，configure之后会报错，此时重新运行configure是没有用的，需要按如下方法运行</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">dos2unux ./configure.acaclocalautoconfautomake <span class="token parameter variable">-a</span>./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/tempo"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>之后再继续<code>make</code>和<code>make install</code>即可</p></blockquote><h3 id="tempo-第3步：添加环境"><a href="#tempo-第3步：添加环境" class="headerlink" title="tempo.第3步：添加环境"></a>tempo.第3步：添加环境</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PKG_CONFIG_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$PKG_CONFIG_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/tempo/lib/pkgconfig"</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable">TEMPO</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/tempo"</span> <span class="token comment"># 如果写在~/.bashrc里，记得source ~/.bashrc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="4-cfitsio安装"><a href="#4-cfitsio安装" class="headerlink" title="4.cfitsio安装"></a>4.cfitsio安装</h2><h3 id="cfitsio-第1步：安装"><a href="#cfitsio-第1步：安装" class="headerlink" title="cfitsio.第1步：安装"></a>cfitsio.第1步：安装</h3><p><mark>现在请切换到cfitsio的源码根目录(<code>~/Downloads/cfitsio</code>)</mark></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/cfitsio"</span> <span class="token function">make</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="cfitsio-第2步：添加环境变量"><a href="#cfitsio-第2步：添加环境变量" class="headerlink" title="cfitsio.第2步：添加环境变量"></a>cfitsio.第2步：添加环境变量</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PKG_CONFIG_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$PKG_CONFIG_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/cfitsio/lib/pkgconfig"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$LD_LIBRARY_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/cfitsio/lib"</span><span class="token comment"># 如果写在~/.bashrc里，记得source ~/.bashrc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="5-安装PRESTO"><a href="#5-安装PRESTO" class="headerlink" title="5.安装PRESTO"></a>5.安装PRESTO</h2><h3 id="presto-第1步：添加安装用的环境变量"><a href="#presto-第1步：添加安装用的环境变量" class="headerlink" title="presto.第1步：添加安装用的环境变量"></a>presto.第1步：添加安装用的环境变量</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PRESTO</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Downloads/presto/"</span> <span class="token comment"># 把USER替换为你的用户名</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$LD_LIBRARY_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Downloads/presto/lib"</span> <span class="token comment"># 如果写在~/.bashrc里，记得source ~/.bashrc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="presto-第2步：修改1个文件"><a href="#presto-第2步：修改1个文件" class="headerlink" title="presto.第2步：修改1个文件"></a>presto.第2步：修改1个文件</h3><p><mark>现在请切换到presto下的src目录(<code>~/Downloads/presto/src</code>)</mark></p><p>打开<code>./realfft.c</code>，编辑第70行，</p><figure><div class="code-wrapper"><pre class="line-numbers language-vim" data-language="vim"><code class="language-vim"># 改前<span class="token operator">.</span><span class="token operator">.</span><span class="token operator">.</span><span class="token keyword">for</span> <span class="token punctuation">(</span>int fi <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> fi <span class="token operator">&lt;</span> numfiles <span class="token punctuation">;</span> fi<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">.</span># 改后<span class="token operator">.</span><span class="token operator">.</span><span class="token operator">.</span>int fi<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>fi <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> fi <span class="token operator">&lt;</span> numfiles <span class="token punctuation">;</span> fi<span class="token operator">+</span><span class="token operator">+</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">.</span><span class="token operator">.</span><span class="token operator">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="presto-第3步：安装"><a href="#presto-第3步：安装" class="headerlink" title="presto.第3步：安装"></a>presto.第3步：安装</h3><p><mark>保持在presto下的src目录(<code>~/Downloads/presto/src</code>)</mark></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> makewisdom<span class="token function">make</span> prep<span class="token function">make</span>    <span class="token comment"># 目前只能安装在源码目录下</span><span class="token comment"># 下面这两行本来也是安装的步骤，但服务器没网就算了，不影响</span><span class="token builtin class-name">cd</span> <span class="token variable">$PRESTO</span>pip <span class="token function">install</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="presto-第4步：添加环境变量"><a href="#presto-第4步：添加环境变量" class="headerlink" title="presto.第4步：添加环境变量"></a>presto.第4步：添加环境变量</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Downloads/presto/bin"</span> <span class="token comment"># 注意，这条是在源码目录下！！！</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CPLUS_INCLUDE_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CPLUS_INCLUDE_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/fftw/include"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CPLUS_INCLUDE_PATH</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$CPLUS_INCLUDE_PATH</span>:<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Program_Files/presto/include"</span><span class="token comment"># 如果写在~/.bashrc里，记得source ~/.bashrc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>到目前为止，你应该正确安装了presto。下面我们进行一些验证。输入<code>readfile --help</code>，应该有如下的输出</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">readfile: unknown option <span class="token variable"><span class="token variable">`</span>--help<span class="token string">'   [-page] [-byte] [-b] [-float] [-f] [-double] [-d] [-fcomplex] [-fc] [-dcomplex] [-dc] [-short] [-s] [-int] [-i] [-long] [-l] [-rzwcand] [-rzw] [-bincand] [-bin] [-position] [-pos] [-pkmb] [-bcpm] [-wapp] [-spigot] [-filterbank] [-psrfits] [-fortran] [-index [index]] [-nph nph] [--] file      Reads raw data from a binary file and displays it on stdout.          -page: Paginate the output like '</span>more'          -byte: Raw data <span class="token keyword">in</span> byte <span class="token function">format</span>             -b: Raw data <span class="token keyword">in</span> byte <span class="token function">format</span>         -float: Raw data <span class="token keyword">in</span> floating point <span class="token function">format</span>             -f: Raw data <span class="token keyword">in</span> floating point <span class="token function">format</span>        -double: Raw data <span class="token keyword">in</span> double precision <span class="token function">format</span>             -d: Raw data <span class="token keyword">in</span> double precision <span class="token function">format</span>      -fcomplex: Raw data <span class="token keyword">in</span> float-complex <span class="token function">format</span>            -fc: Raw data <span class="token keyword">in</span> float-complex <span class="token function">format</span>      -dcomplex: Raw data <span class="token keyword">in</span> double-complex <span class="token function">format</span>            -dc: Raw data <span class="token keyword">in</span> double-complex <span class="token function">format</span>         -short: Raw data <span class="token keyword">in</span> short <span class="token function">format</span>             -s: Raw data <span class="token keyword">in</span> short <span class="token function">format</span>           -int: Raw data <span class="token keyword">in</span> integer <span class="token function">format</span>             -i: Raw data <span class="token keyword">in</span> integer <span class="token function">format</span>          -long: Raw data <span class="token keyword">in</span> long <span class="token function">format</span>             -l: Raw data <span class="token keyword">in</span> long <span class="token function">format</span>       -rzwcand: Raw data <span class="token keyword">in</span> rzw search candidate <span class="token function">format</span>           -rzw: Raw data <span class="token keyword">in</span> rzw search candidate <span class="token function">format</span>       -bincand: Raw data <span class="token keyword">in</span> bin search candidate <span class="token function">format</span>           -bin: Raw data <span class="token keyword">in</span> bin search candidate <span class="token function">format</span>      -position: Raw data <span class="token keyword">in</span> position struct <span class="token function">format</span>           -pos: Raw data <span class="token keyword">in</span> position struct <span class="token function">format</span>          -pkmb: Raw data <span class="token keyword">in</span> Parkes Multibeam <span class="token function">format</span>          -bcpm: Raw data <span class="token keyword">in</span> BCPM <span class="token function">format</span>          -wapp: Raw data <span class="token keyword">in</span> WAPP <span class="token function">format</span>        -spigot: Raw data <span class="token keyword">in</span> Spigot Card <span class="token function">format</span>    -filterbank: Raw data <span class="token keyword">in</span> SIGPROC filterbank <span class="token function">format</span>       -psrfits: Raw data <span class="token keyword">in</span> PSRFITS <span class="token function">format</span>       -fortran: Raw data was written by a fortran program         -index: The range of objects to display                 <span class="token number">0</span><span class="token punctuation">..</span>.2 int values between <span class="token parameter variable">-1</span> and oo                 default: <span class="token variable">`</span></span><span class="token number">0</span><span class="token string">' ` -1'</span>           -nph: 0th FFT bin amplitude <span class="token punctuation">(</span>for <span class="token string">'RZW'</span> data<span class="token punctuation">)</span>                 <span class="token number">1</span> double value                 default: `1.0'           file: Input data <span class="token function">file</span> name.                 <span class="token number">1</span> value  version: 12Mar10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>如果有这些输出，就说明是成功安装了</p><h1 id="三、跑数据集"><a href="#三、跑数据集" class="headerlink" title="三、跑数据集"></a>三、跑数据集</h1><h2 id="跑数据集的第1步：预处理"><a href="#跑数据集的第1步：预处理" class="headerlink" title="跑数据集的第1步：预处理"></a>跑数据集的第1步：预处理</h2><p>在数据目录(<code>~/Data/</code>)下执行如下指令</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">readfile ~/Data/GBT_Lband_PSR.filrfifind <span class="token parameter variable">-time</span> <span class="token number">1.0</span> <span class="token parameter variable">-o</span> Lband ~/Data/GBT_Lband_PSR.filprepdata <span class="token parameter variable">-nobary</span> <span class="token parameter variable">-o</span> ~/Data/Lband_topo_DM0.00 <span class="token parameter variable">-dm</span> <span class="token number">0.0</span> <span class="token parameter variable">-mask</span> ~/Data/Lband_rfifind.mask ~/Data/GBT_Lband_PSR.fil<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="跑数据集的第2步：写脚本"><a href="#跑数据集的第2步：写脚本" class="headerlink" title="跑数据集的第2步：写脚本"></a>跑数据集的第2步：写脚本</h2><p>编写如下的脚本，注意保存的后缀需要是<code>*.slurm</code>（可以取名为<code>run.slurm</code>）：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment">#SBATCH -J presto</span><span class="token comment">#SBATCH -p cpu-low</span><span class="token comment">#SBATCH -N 2</span><span class="token comment">#SBATCH -n 16</span><span class="token comment">#SBATCH --ntasks-per-node=8</span><span class="token comment">#SBATCH -t 5:00</span><span class="token comment">#SBATCH -o run.out</span><span class="token comment">#SBATCH -e run.err</span>module load intel/18.0.3.222<span class="token builtin class-name">cd</span> <span class="token variable">$PRESTO</span>/tests/mpirun <span class="token parameter variable">-np</span> <span class="token number">2</span> accelsearch <span class="token parameter variable">-numharm</span> <span class="token number">4</span> <span class="token parameter variable">-zmax</span> <span class="token number">0</span> <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/Data/Lband_topo_DM0.00.dat"</span> <span class="token parameter variable">-ncpus</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>然后，我们可以先在本地试试脚本能不能正常运行。在终端里输入如下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> ./run.slurm <span class="token operator"><span class="token file-descriptor important">1</span>></span>run.out <span class="token operator"><span class="token file-descriptor important">2</span>></span>run.err <span class="token comment"># 假设你保存的脚本叫run.slurm</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果<code>run.err</code>大小为<code>0b</code>，<code>0K</code>，说明没有问题，那么就放心提交作业吧!</p><blockquote><p><strong>注：命令含义解释</strong></p><p><code>1&gt;run.out</code>表示把脚本的执行的<strong>正常</strong>输出写到run.out文件，尖括号左右不要有空格</p><p><code>2&gt;run.err</code>表示把脚本的执行的<strong>错误</strong>输出写到run.err文件，尖括号左右不要有空格</p></blockquote><h2 id="跑数据集的第3步：提交"><a href="#跑数据集的第3步：提交" class="headerlink" title="跑数据集的第3步：提交"></a>跑数据集的第3步：提交</h2><p>如果在上面你脚本里<code>Lband_topo_DM0.00.dat</code>用的是绝对路径，那么在这一步你的slurm脚本就可以随便放。</p><p>在你放脚本的地方执行如下指令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sbatch run.slurm <span class="token comment"># 提交作业脚本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>如果正常提交，会有如下的结果：</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>para_xxxxxxxx@ln04 ~<span class="token punctuation">]</span>$ sbatch run.slurmSubmitted batch job xxxxxxxx        <span class="token comment"># 仅表示成功提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>至于运行的结果，则需要在<code>run.out</code>和<code>run.err</code>里面看了。（对应你slurm脚本的<code>#SBATCH -o run.out</code>和<code>#SBATCH -e run.err</code>）</p><p>至于其它的问题，请自己解决吧，因为我也没有解决（笑</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://blog.csdn.net/Among12345/article/details/93767772">CentOS 7 安装 pgplot</a></p><p><a href="https://www.plxray.cn/article/example-7">PRESTO指导手册中文版</a></p><p><a href="https://www.cnblogs.com/ddl789/p/17208358.html">脉冲星PRESTO部署文档</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>HPC</tag>
      
      <tag>instruction</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>『码图』而非『画图』——Mermaid语法简介</title>
    <link href="/posts/8233ee46/"/>
    <url>/posts/8233ee46/</url>
    
    <content type="html"><![CDATA[<p>相信对于程序员来说，markdown这一个词应该不陌生。markdown的语法很简单，但简单的语法也可以扩展出许多高级的方法。<br>本文就是来介绍其中一个高级用法——mermaid</p><p>什么是mermaid？mermaid是一个方便（相对于经常敲代码的人(✿◠‿◠)）的绘制流程图的js工具。<br>严格来说，mermaid并不是markdown自带的语法。但目前多数markdown(严格来说应该是<code>markdown-mmd</code>)都支持mermaid。</p><p>mermaid可以支持如下种类的图(2024-03-06)</p><ul><li>流程图(flowchart)</li><li>序列图(sequenceDiagram)</li><li>类图(classDiagram)</li><li>状态图(stateDiagram-v2)</li><li>实体关系图(erDiagram)</li><li>甘特图(gantt)</li><li>用户旅程图(journey)</li><li>Git图(gitGraph)</li><li>饼图(pie)</li><li>简单版的思维导图(mindmap)</li><li>四象限图(quadrantChart)</li><li>柱状图(xychart-beta)</li><li>框图(block-beta)</li></ul><p>这里是<a href="https://mermaid.live/edit#pako:eNpVjstqw0AMRX9FaNVC_ANeFBq7zSbQQrPzeCFsOTOk80CWCcH2v3dcb1qthM654s7YxZ6xxOE73jtLonCpTYA8r01lxY3qaWyhKF6WEyv4GPixwPHpFGG0MSUXrs-7f9wkqObzpjGodeG27qj6zX8EXqBuzpQ0pvYvudzjAm-N-7T5_X9ihXPqvRmoHKjoSKAiafGAnsWT63P1eQsYVMueDZZ57UluBk1Ys0eTxq9H6LBUmfiAU-pJuXZ0FfL7cf0BtrdUXg">在线的mermaid编辑器</a></p><p>既然文章的题目叫简介，那么肯定讲得不如<a href="https://mermaid.nodejs.cn/intro/">官方文档</a>详细。我只是记录一些基本的语法，以及我遇到的问题</p><h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1>]]></content>
    
    
    <categories>
      
      <category>article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>程序语言</tag>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Matlab中的plot函数</title>
    <link href="/posts/c31a0829/"/>
    <url>/posts/c31a0829/</url>
    
    <content type="html"><![CDATA[<h2 id="subplot"><a href="#subplot" class="headerlink" title="subplot"></a>subplot</h2><p>matlabl中<code>subplot(1,2,1)</code>意思<br>在MATLAB中，subplot(0函数用于在同一图中绘制多个子图。其中，括号中的参数表示子图的排列方式。<br>例如，subplot(121)表示将当前图分成一行两列，当前绘图窗口的第一个子图。具体解释如下：</p><ul><li>第一个参数1表示图形总行数为1</li><li>第二个参数2表示图形总列数为2</li><li>第三个参数1表示当前绘制的子图为第1个<br>因此，<code>subplot(1,2,1)</code>的作用是将当前绘图窗口划分为1行2列，然后在第1个子图上进行绘制。</li></ul><h2 id="plot-改线宽、线型、颜色"><a href="#plot-改线宽、线型、颜色" class="headerlink" title="plot 改线宽、线型、颜色"></a>plot 改线宽、线型、颜色</h2><p><code>plot(x1,y1,...,xn,yn,&#39;LineWidth&#39;,4)</code></p><p>线型 线方式： <code>-</code> 实线 <code>:</code>点线 <code>-.</code> 虚点线 <code>--</code> 波折线。 </p><p>线型 点方式： <code>.</code> 圆点 <code>+</code>加号 <code>*</code> 星号 <code>x</code> x形 <code>o</code> 小圆</p><p>颜色： y黄； r红； g绿； b蓝； w白； k黑； m紫； c青.</p><p>比如：<code>plot(t,y(:,1),&#39;-o&#39;,t,y(:,2),&#39;r&#39;)</code></p><h2 id="加图例，改标题"><a href="#加图例，改标题" class="headerlink" title="加图例，改标题"></a>加图例，改标题</h2><p>都是在<code>plot</code>命令之后另起一行。</p><p><code>legend(&#39;x&#39;,&#39;y&#39;,&#39;z&#39;);</code>表示第1个线标<code>x</code>的图例。</p><p><code>xlabel(&#39;xxxx&#39;)</code>表示当前plot的x坐标文字。</p><h2 id="figure对象-axis-plot"><a href="#figure对象-axis-plot" class="headerlink" title="figure对象, axis, plot"></a>figure对象, axis, plot</h2><p><code>f1 = figure(1);</code><br><img src="https://mitnick-pic-1258691431.cos.ap-beijing.myqcloud.com/mitnick/pic/202404282114352.png" alt="figure" title="figure"></p><p><code>ax1 = axes(f1);</code><br><img src="https://mitnick-pic-1258691431.cos.ap-beijing.myqcloud.com/mitnick/pic/202311270012388.png" alt="axes" title="axes"><br>axes只能在figure已经创建的情况下才能用，如果关闭了之间的窗口，这个命令就不能用。</p>]]></content>
    
    
    <categories>
      
      <category>article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Matlab</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git中的后悔药</title>
    <link href="/posts/8804f53c/"/>
    <url>/posts/8804f53c/</url>
    
    <content type="html"><![CDATA[<h1 id="版本库中的后悔药"><a href="#版本库中的后悔药" class="headerlink" title="版本库中的后悔药"></a>版本库中的后悔药</h1><h2 id="git-commit-–amend"><a href="#git-commit-–amend" class="headerlink" title="git commit –amend"></a>git commit –amend</h2><h2 id="git-revert-id"><a href="#git-revert-id" class="headerlink" title="git revert id"></a>git revert id</h2><p>回到第<code>id</code>次提交，但是是用提交一个新的分支的方式</p><h2 id="git-reset-id"><a href="#git-reset-id" class="headerlink" title="git reset id"></a>git reset id</h2><p><code>git reset id</code> 命令会直接删除版本库中的一次commit，<code>id</code>是你想要回到的那个版本。<br>其有3个参数可选：</p><ol><li><code>--soft</code>：将你删除的这次commit在版本库中的文件放到<strong>工作区</strong>和<strong>暂存区</strong></li><li><code>--mixed</code>（默认）：将你删除的这次commit在版本库中的文件放仅到<strong>工作区</strong></li><li><code>--hard</code>（<font color=red><b>危险</b></font>）：直接删除，在提交<code>id</code>之后的所有修改永远丢失！</li></ol><p>如果第一次提交的时候，没有在gitignore文件中添加忽略文件，那么这些文件（目录也是文件）就会被git跟踪。<br>此时如果想让git取消对一些文件的跟踪，可以用如下命令：</p><figure><div class="code-wrapper"><pre class="line-numbers language-git" data-language="git"><code class="language-git">git rm (-r) --cached xxx        //仅删除在暂存区中的已跟踪文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>删除后，本地的文件还在，但git没有再跟踪了。之后再去修改<code>.gitignore</code>就可以了。</p><p>最好<code>.gitignore</code>文件的修改单独做一次提交</p>]]></content>
    
    
    <categories>
      
      <category>article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css-demo</title>
    <link href="/posts/a52726e1/"/>
    <url>/posts/a52726e1/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><p>在全球总电子含量（Total Electron Content, TEC）经验模型中表达各种电离层异常是一项具有挑战性的研究。现有的经验模型通过构造模型分量来表达电离层异常。</p><p>在全球总电子含量（Total Electron Content, TEC）经验模型中表达各种电离层异常是一项具有挑战性的研究。现有的经验模型通过构造模型分量来表达电离层异常。</p><blockquote><p>在全球总电子含量（Total Electron Content, TEC）经验模型中表达各种电离层异常是一项具有挑战性的研究。现有的经验模型一般通过构造模型分量来表达电离层异常。</p></blockquote><div class="note note-info">            <p>在全球总电子含量（Total Electron Content, TEC）经验模型中表达各种电离层异常是一项具有挑战性的研究。现有的经验模型通过构造模型分量来表达电离层异常。</p>          </div><div class="note note-warning">            <p>在全球总电子含量（Total Electron Content, TEC）经验模型中表达各种电离层异常是一项具有挑战性的研究。现有的经验模型通过构造模型分量来表达电离层异常。</p>          </div><div class="note note-danger">            <p>在全球总电子含量（Total Electron Content, TEC）经验模型中表达各种电离层异常是一项具有挑战性的研究。现有的经验模型通过构造模型分量来表达电离层异常。</p>          </div><div class="note note-success">            <p>在全球总电子含量（Total Electron Content, TEC）经验模型中表达各种电离层异常是一项具有挑战性的研究。现有的经验模型通过构造模型分量来表达电离层异常。</p>          </div><div class="note note-primary">            <p>在全球总电子含量（Total Electron Content, TEC）经验模型中表达各种电离层异常是一项具有挑战性的研究。现有的经验模型通过构造模型分量来表达电离层异常。</p>          </div><div class="note note-secondary">            <p>在全球总电子含量（Total Electron Content, TEC）经验模型中表达各种电离层异常是一项具有挑战性的研究。现有的经验模型通过构造模型分量来表达电离层异常。</p>          </div><div class="note note-light">            <p>在全球总电子含量（Total Electron Content, TEC）经验模型中表达各种电离层异常是一项具有挑战性的研究。现有的经验模型通过构造模型分量来表达电离层异常。</p>          </div><!-- 这是个注释 --><p>如有问题请查询<a href="https://www.baidu.com/">百度</a>，相关数据在<a href="https://www.baidu.com/">https://www.baidu.com</a>下载。</p><p><span alt="solid">sdfaasdfasfa</span><br><span alt="dotted">sfdasfasasfda</span><br><span alt="wavy">sfafasfasfasfsad</span><br><span alt="delete">sdfasdfasdfasfasdf</span><br><span alt="shadow">dfafasfasdfas</span><br><span alt="hollow">asfadfasdfasfas</span><br><span alt="blink">afasdfasdfasd</span><br><mark>asfasdfas</mark><br><kbd>asdfasfafa</kbd><br><mark>asdfafafsa</mark></p><p><font>默认标签</font>、<font title="red">红色标签</font>、<font title="yellow">黄色标签</font>、<font title="green">绿色标签</font>、<font title="blue">蓝色标签</font>、<font title="gray">灰色标签</font>、<font style="background-color:#28af94">自定义颜色标签</font></p><p><font title="purple" color=purple><b>标签</b></font><br><font title="orange">标签</font></p><p><span alt="solid">下划线</span>、<span alt="dotted">着重号</span>、<span alt="wavy">波浪线</span>、<span alt="delete">删除线</span>、<span alt="shadow">阴影效果</span>、<span alt="hollow">空心字</span>、<span alt="blink">字体闪烁</span></p><p>&#x3D;&#x3D;高亮&#x3D;&#x3D;、<kbd>Enter</kbd>、<mark>高亮2</mark></p><div>            <input type="checkbox"  >xxx          </div><details>    <summary>折叠标签</summary>    <p>青青子衿，悠悠我心</p>    <p>老骥伏枥，志在千里</p></details><div class="note note-danger">            <details>    <summary>证明：</summary>    青青子衿，悠悠我心<br>    老骥伏枥，志在千里sdfadaf<figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">asfasdfaasdfasd$$</code></pre></div></figure><p>\varphi<br>$$</p><hr>上面有一条分界线</details>          </div><hr><p>这里有一个脚注<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="张亭,赵庆鑫,钟慧鑫,张一彬,朱云聪,冯建迪.国际参考电离层2016模型在陆海区域的精度分析J.测绘科学,2021,46(09):14-33.DOI:10.16251/j.cnki.1009-2307.2021.09.003.">[1]</span></a></sup>。</p><p>行内公式：<br>$y&#x3D;ax^2+bx+c$</p><p>行间公式：<br>$$<br>y&#x3D;ax^2+bx+c<br>$$</p><p>行间公式：<br>$$ \begin{gather*}<br>\begin{aligned}<br>左边 &amp;&#x3D; \mathbf{ \dot{r} } \cdot \frac{\mathrm{d}(\mathbf{ \dot{r} })}{\mathrm{d}t}<br>&#x3D; \frac{\mathrm{d}}{\mathrm{d}t}\int_{}^{} \mathbf{ \dot{r} }\cdot \frac{\mathrm{d}(\mathbf{ \dot{r} })}{\mathrm{d}t}\mathrm{d}t\<br>&amp;&#x3D; \frac12 \frac{\mathrm{d}}{\mathrm{d}t}\left(\mathbf{ \dot{r} }\cdot \mathbf{ \dot{r} }\right)\<br>&amp;&#x3D; \frac{\mathrm{d}}{\mathrm{d}t}\left(\frac12 v^2\right)\quad (此处v是大小)<br>\end{aligned}<br>\end{gather*} $$</p><p><code>print(&#39;Hello World&#39;)</code></p><figure><div class="code-wrapper"><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span>newlife<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>clc<span class="token punctuation">;</span><span class="token comment">% 加载数据</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">100</span><span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token operator">*</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">% 计算拟合曲线</span>p <span class="token operator">=</span> <span class="token function">polyfit</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x0 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>y0 <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token operator">*</span><span class="token function">x0</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token punctuation">,</span>a<span class="token operator">*</span><span class="token function">x0</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>b<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">% 计算相关系数</span>R <span class="token operator">=</span> <span class="token function">corrcoef</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>R <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">'%.2f'</span><span class="token punctuation">,</span><span class="token function">R</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ol><li>有序列表<ol><li>有序列表</li><li>有序列表</li></ol></li></ol><ul><li><p>无序列表</p><ul><li>无序列表</li><li>无序列表</li></ul></li><li><p><input checked="" disabled="" type="checkbox"> 事项1</p></li><li><p><input disabled="" type="checkbox"> 事项2</p></li><li><p><input disabled="" type="checkbox"> 事项3</p></li></ul><p>特殊写法的checkbox： <code>&#123;% cb xxx, true, %&#125;</code></p><div>            <input type="checkbox"  checked="checked">xxx          </div><!-- markdown不支持绝对路径--><img src="/img/Typora_02.png"  style="width:40vw;" /><hr><table><thead><tr><th align="center">日期</th><th align="center">金额</th><th align="center">利息</th></tr></thead><tbody><tr><td align="center">2012.03</td><td align="center">￥2000</td><td align="center">￥2000</td></tr><tr><td align="center">2012.04</td><td align="center">￥2000</td><td align="center">￥2000</td></tr><tr><td align="center">2012.05</td><td align="center">￥2000</td><td align="center">￥2000</td></tr><tr><td align="center">2012.06</td><td align="center">￥2000</td><td align="center">￥2000</td></tr></tbody></table><center><div alt="fig">表1.三线表</div><div alt="three-table"><table>  <tr>    <th alt="center">日期</th>    <th alt="center">金额</th>    <th alt="center">利息</th>  </tr>  <tr>    <td alt="center">2012.01</td>    <td alt="center">￥2000</td>    <td alt="center">￥2000</td>  </tr>  <tr>    <td alt="center">2012.02</td>    <td alt="center">￥2000</td>    <td alt="center">￥2000</td>  </tr>      <tr>    <td alt="center">2012.03</td>    <td alt="center">￥2000</td>    <td alt="center">￥2000</td>  </tr></table></div></center> <section class="footnotes"><hr><hr><h2>相关参考</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>张亭,赵庆鑫,钟慧鑫,张一彬,朱云聪,冯建迪.国际参考电离层2016模型在陆海区域的精度分析J.测绘科学,2021,46(09):14-33.DOI:10.16251&#x2F;j.cnki.1009-2307.2021.09.003.<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>其它</category>
      
    </categories>
    
    
    <tags>
      
      <tag>effect-testing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时域分析</title>
    <link href="/posts/8db71ba5/"/>
    <url>/posts/8db71ba5/</url>
    
    <content type="html"><![CDATA[<p>本章重点：稳定性判断、系统响应的相关参数</p><!-- toc --><h1 id="一阶系统"><a href="#一阶系统" class="headerlink" title="一阶系统"></a>一阶系统</h1><h1 id="二阶系统"><a href="#二阶系统" class="headerlink" title="二阶系统"></a>二阶系统</h1><h1 id="稳定性判据"><a href="#稳定性判据" class="headerlink" title="稳定性判据"></a>稳定性判据</h1><h1 id="响应的相关参数"><a href="#响应的相关参数" class="headerlink" title="响应的相关参数"></a>响应的相关参数</h1>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>自动控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>一阶系统分析</tag>
      
      <tag>二阶系统分析</tag>
      
      <tag>时域分析</tag>
      
      <tag>稳定性判据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数电总结1</title>
    <link href="/posts/e6683f03/"/>
    <url>/posts/e6683f03/</url>
    
    <content type="html"><![CDATA[<!-- toc --><h1 id="数制与码制"><a href="#数制与码制" class="headerlink" title="数制与码制"></a>数制与码制</h1><p>这部分基本上是学习计算机相关课程所需要的必要内容，但同时也意味着，你可以在其它地方学到本部分的内容。</p><p><strong>数制的定义：</strong> 包含每一位<span alt="solid">由什么构成</span>和从低位到高位的<span alt="solid">进位规则</span></p><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>在大学所学的进制转换中，除了整数需要转换，还有小数需要转换。</p><h3 id="2-8-16"><a href="#2-8-16" class="headerlink" title="2-8-16"></a>2-8-16</h3><p>最简单：2进制(Binary)、16进制(Hexadecimal)、8进制(Octal)之间的相互转换。</p><p>只需要注意：整数部分不够在高位补0，小数部分不够在末位补0</p><h3 id="10-2"><a href="#10-2" class="headerlink" title="10-2"></a>10-2</h3><p>整数部分：除2法（看余数，<font title="red" color=red><b>倒序</b></font>）</p><center><img src="https://mitnick-pic-1258691431.cos.ap-beijing.myqcloud.com/mitnick/pic/202310100032315.png" alt="Typora" style="width:30%;" /></center><p>小数部分：乘2法（看每次乘出来的整数位，<font title="red" color=red><b>正序</b></font>）</p><center><img src="https://mitnick-pic-1258691431.cos.ap-beijing.myqcloud.com/mitnick/pic/202310100033712.png" alt="Typora" style="width:50%;" /></center><h3 id="2-10"><a href="#2-10" class="headerlink" title="2-10"></a>2-10</h3><p>就是2的次幂相乘相加</p><h2 id="机内存储码"><a href="#机内存储码" class="headerlink" title="机内存储码"></a>机内存储码</h2><p>在计算机中有4种存储码：<font title="green" color=green><b>原码、反码、补码、移码</b></font></p><p>常用的是补码和移码，但移码不考，主要考<font title="blue" color=blue><b>补码</b></font></p><blockquote><p>如何补码与原码之间的相互转换？</p><p>不管是补码转原码还是原码转补码，都是取反再加1。<br>不过需要注意，符号位<mark>不动</mark></p></blockquote><h4 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h4><p>原码、反码：老老实实减。</p><p>补码：转换为加法</p><h4 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h4><p>加法+左移</p><h4 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h4><p>减法+移（如果用补码就变成加法+移）</p><h2 id="代码和编码"><a href="#代码和编码" class="headerlink" title="代码和编码"></a>代码和编码</h2><h3 id="BCD"><a href="#BCD" class="headerlink" title="BCD"></a>BCD</h3><p>用4位二进制数来表示1位十进制数中的0~9这10个数码的都是BCD。可以分为2大类：恒权码和变权码。</p><p>像<code>8421码</code>,<code>5421</code>,<code>2421</code>等都是恒权码。</p><p>而变权码的代表是余3码和余3循环码</p><h4 id="余3码"><a href="#余3码" class="headerlink" title="余3码"></a>余3码</h4><p>余3码，就是在8421码的基础上，每一个二进制数对应加上3，比如十进制中的0，在余3码中，对应的就是0011。</p><h4 id="余3循环码"><a href="#余3循环码" class="headerlink" title="余3循环码"></a>余3循环码</h4><p>余3循环码，是在余3码的基础上，<br>进行求格雷码的异或运算（从左到右，第一位相等，余3码的第二位开始与前一位进行异或运算求得余3循环码该位的值）。<br>比如，十进制的0，余3码中对应的是0011，余三循环码中对应的就是0010。</p><p><span alt="wavy">这样可以拥有Gray码的主要特性</span></p><h3 id="Gray码"><a href="#Gray码" class="headerlink" title="Gray码"></a>Gray码</h3><h3 id="校验码"><a href="#校验码" class="headerlink" title="校验码"></a>校验码</h3><p>这里又有学问了。不过数电讲的不多，后面再补充。</p><h4 id="奇偶校验码"><a href="#奇偶校验码" class="headerlink" title="奇偶校验码"></a>奇偶校验码</h4><p>只有<font title="red" color=red><b>一位</b></font>校验码</p><p>奇(odd)校验码： <strong>信息码</strong>和<strong>校验码</strong>中的1为奇数。</p><p>偶(even)校验码： <strong>信息码</strong>和<strong>校验码</strong>中的1为偶数。</p><h3 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h3><p>搞计算机相关的一定学过。此处略。</p><hr><h1 id="逻辑代数"><a href="#逻辑代数" class="headerlink" title="逻辑代数"></a>逻辑代数</h1><p><strong>逻辑变量：</strong> 只有0和1</p><p><strong>逻辑函数：</strong> 逻辑变量运算的结果</p><p>3种表示方式：表达式、真值表、逻辑符号（电路符号）</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>数字电路</category>
      
    </categories>
    
    
    <tags>
      
      <tag>default</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自动控制的基础</title>
    <link href="/posts/f81506ce/"/>
    <url>/posts/f81506ce/</url>
    
    <content type="html"><![CDATA[<!-- toc --><h1 id="控制系统的表示"><a href="#控制系统的表示" class="headerlink" title="控制系统的表示"></a>控制系统的表示</h1><p>在自动控制领域，我们关心的是输出量这几个量的关系：</p><ol><li>我们给的输入量</li><li>干扰量</li></ol><p><span alt="shadow">(系统的输出量与我们预计的输出量之间的差距，也是我们关心的部分，这个后面慢慢聊)</span></p><p>要想看输出与输入之间的关系，最<font title="red" color=red><b>自然</b></font>的一个想法就是把输入与输出写成一个函数。</p><p>因此引出一个大的知识点：系统的微分方程与传递函数。</p><h2 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h2><p>列写系统的微分方程很简单，只需要分别对每个子环节列微分方程（可以需要借助中间变量），然后联立即可。</p><p>例：</p><blockquote><p>例1<br>设有一弹簧、质量块、阻尼器组成的系统如图所示，当外力$F$作用于系统时，系统将产生运动。建立外力F 与质量块位移y(t )之间的动态方程。其中弹簧的弹性系数为K，阻尼器的阻尼系数为f，质量块的质量为m。</p><center><img src="https://mitnick-pic-1258691431.cos.ap-beijing.myqcloud.com/mitnick/pic/202309171718852.png" alt="例1" style="width:40%;" /></center><hr><p>解 对质量块进行受力分析，作用在质量块上的力有</p><ol><li>外力: $F$</li><li>弹簧回复力: $Ky(t)$</li><li>阻尼力: $\displaystyle f\frac{\mathrm{d}y(t)}{\mathrm{d}t}$</li></ol><p>由牛顿第二定律得：<br>$$<br>m\frac{\mathrm{d}^2y(t)}{\mathrm{d}t^2}+f\frac{\mathrm{d}y(t)}{\mathrm{d}t} + Ky(t)&#x3D;F<br>$$ </p></blockquote><h2 id="传递函数"><a href="#传递函数" class="headerlink" title="传递函数"></a>传递函数</h2><p>在数学中如果有微分，会比较难以分析。于是我们可以利用Laplace变换把其变换到复数域上再进行分析，<br>这样会方便很多。</p><p><strong>传递函数就是复数域下的输入输出关系函数</strong></p><p>既然需要用Laplace变换，我们的一个很重要的知识点就出来了——<a href="#Laplace">Laplace变换相关</a></p><h3 id="Laplace变换"><a href="#Laplace变换" class="headerlink" title="Laplace变换"></a><a id="Laplace">Laplace变换</a></h3><blockquote alt="info"><p><p>定义：</p><p>$$<br>\begin{gather}<br>L[f(t)]&#x3D;F(s) &#x3D; \int_{0^-}^{+\infty} f(t)e^{-st}\mathrm{d}t \quad(正变换)\<br>L^{-1}[F(s)] &#x3D; \frac{1}{2\pi j}\int_{r-\infty j}^{r+\infty j } F(s)e^{st}\mathrm{d}s (t&gt;0) \quad(逆变换)<br>\end{gather}\tag{1.1}\label{def-laplace}<br>$$</p><p>这是的$s$是复数</p></p></blockquote><p><span alt="dotted">定义需要经常看</span>。虽然直接用得少，但多半会考。</p><p>然后是Laplace变换的一些性质：</p><h3 id="Laplace变换的性质定理"><a href="#Laplace变换的性质定理" class="headerlink" title="Laplace变换的性质定理"></a>Laplace变换的性质定理</h3><h4 id="线性"><a href="#线性" class="headerlink" title="线性"></a>线性</h4><p>无特别，略。</p><h4 id="积分与微分性质"><a href="#积分与微分性质" class="headerlink" title="积分与微分性质"></a>积分与微分性质</h4><p>$s$可以看作微分算子的由来</p><h4 id="延迟性质"><a href="#延迟性质" class="headerlink" title="延迟性质"></a>延迟性质</h4><p>$$<br>\begin{gather}<br>L[f(t-t_0)]&#x3D;F(s)e^{-t_0s}<br>\end{gather}<br>$$</p><h4 id="终值定理-重要"><a href="#终值定理-重要" class="headerlink" title="终值定理(重要)"></a>终值定理(<font title="red" color=red><b>重要</b></font>)</h4><p>若$\lim\limits_{t\to {\color{red}\infty}}f(t)$和 $\lim\limits_{s\to {\color{red}0}}sF(s)$都存在，则<br> $$<br>\begin{gather}<br>\lim_{t\to {\color{red}\infty}}f(t)&#x3D;\lim_{s\to {\color{red}0}}sF(s)<br>\end{gather}<br>$$</p><h4 id="附常用的变换表"><a href="#附常用的变换表" class="headerlink" title="附常用的变换表"></a>附常用的变换表</h4><table><thead><tr><th align="center">原函数</th><th align="center">象函数</th></tr></thead><tbody><tr><td align="center">$\delta(1)$</td><td align="center">$1$</td></tr><tr><td align="center">$1(t)$</td><td align="center">$\displaystyle \frac{1}{s}$</td></tr><tr><td align="center">$t$</td><td align="center">$\displaystyle \frac{1}{s^2}$</td></tr><tr><td align="center">$\sin \omega t$</td><td align="center">$\displaystyle \frac{\omega}{s^2+\omega^2}$</td></tr><tr><td align="center">$\cos \omega t$</td><td align="center">$\displaystyle \frac{s}{s^2+\omega^2}$</td></tr><tr><td align="center">R5C1</td><td align="center">R5C2</td></tr><tr><td align="center">R6C1</td><td align="center">R6C2</td></tr><tr><td align="center">R7C1</td><td align="center">R7C2</td></tr><tr><td align="center">R8C1</td><td align="center">R8C2</td></tr><tr><td align="center">R9C1</td><td align="center">R9C2</td></tr></tbody></table><h1 id="动态结构图"><a href="#动态结构图" class="headerlink" title="动态结构图"></a>动态结构图</h1><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><h2 id="化简"><a href="#化简" class="headerlink" title="化简"></a>化简</h2><h1 id="传递函数-1"><a href="#传递函数-1" class="headerlink" title="传递函数"></a>传递函数</h1><p>定义</p><h2 id="化简-1"><a href="#化简-1" class="headerlink" title="化简"></a>化简</h2><h3 id="在结构图上化简"><a href="#在结构图上化简" class="headerlink" title="在结构图上化简"></a>在结构图上化简</h3><h3 id="Mason公式"><a href="#Mason公式" class="headerlink" title="Mason公式"></a>Mason公式</h3><p>直接化简需要技巧，有没有更无脑的方法？Mason公式</p><p>在公式之前有一些概念</p><p><strong>回路：</strong> loop</p><p><strong>互不接触回路：</strong> </p><p>step1 首先找到图里的loop，并求出每个loop的回环函数(G(s)H(s))(负反馈要带负号)</p><p>step2 分母：$1-\sum\text{独立的loop}+\sum\text{有1个相交的2个loop}+\cdots$ （类似容斥）</p><p>step3 分子：$\sum\text{前向通道}\times\text{余因子}$</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
      <category>自动控制</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Lagrange</tag>
      
      <tag>Mason公式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>syncthing/SyncTrayzor如何同步而不删除</title>
    <link href="/posts/d97a10f4/"/>
    <url>/posts/d97a10f4/</url>
    
    <content type="html"><![CDATA[<p>head2</p><p>之间在用syncthing同步笔记的时候，总是担心一个设备的文件被删除后所有的设备一同删除。<br>结果，真的发生了。<br>好在通过一些手段，把数据找回来了。</p><p>在网上找了很久，终于找到了解决方法。<br>下面出图文教程</p><span id="more"></span><p>（感谢这篇<a href="https://jaycechant.info/2016/backup-tips-about-syncthing/">博客</a>的介绍）</p><p>操作-&gt;高级</p><center><img src="https://mitnick-pic-1258691431.cos.ap-beijing.myqcloud.com/mitnick/pic/202309231851158.png" alt="操作->高级" style="width:40%;" /></center><p>选中你要同步的文件夹，然后 把 IgnoreDelete 的勾打上。</p><center><img src="https://mitnick-pic-1258691431.cos.ap-beijing.myqcloud.com/mitnick/pic/202309231854281.png" alt="选中你要同步的文件夹，然后 把 IgnoreDelete 的勾打上" style="width:50%;" /></center><center><img src="https://mitnick-pic-1258691431.cos.ap-beijing.myqcloud.com/mitnick/pic/202309231857391.png" alt="选中你要同步的文件夹，然后 把 IgnoreDelete 的勾打上" style="width:50%;" /></center>]]></content>
    
    
    
    <tags>
      
      <tag>syncthing</tag>
      
      <tag>synctrayzor</tag>
      
      <tag>增量同步</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言的学习笔记</title>
    <link href="/posts/e08a8cc7/"/>
    <url>/posts/e08a8cc7/</url>
    
    <content type="html"><![CDATA[<p>8进制与16进制</p><h1 id="0x00-计算机原理"><a href="#0x00-计算机原理" class="headerlink" title="0x00 计算机原理"></a>0x00 计算机原理</h1><h2 id="01-缓冲区-buffer-与缓存-cache"><a href="#01-缓冲区-buffer-与缓存-cache" class="headerlink" title="01 缓冲区(buffer)与缓存(cache)"></a>01 缓冲区(buffer)与缓存(cache)</h2><p>buffer是内存的一部分<br>cache是CPU，磁盘等的一部分<br>简单来说就是buffer偏重于写，而cache偏重于读。</p><h2 id="02-一个程序运行时的内存空间"><a href="#02-一个程序运行时的内存空间" class="headerlink" title="02 一个程序运行时的内存空间"></a>02 一个程序运行时的内存空间</h2><table><thead><tr><th align="center"></th><th></th></tr></thead><tbody><tr><td align="center">栈区（stack）</td><td>由编译器自动分配释放 ，存放函数的参数值，局部变量的值等</td></tr><tr><td align="center">堆区（heap）</td><td>一般由程序员分配释放(malloc)， 若程序员不释放，程序结束时可能由OS回收</td></tr><tr><td align="center">全局区（静态区）（static）</td><td>全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，<br/>未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放</td></tr><tr><td align="center">文字常量区</td><td>一般常量就是放在这里的。不能被修改。 程序结束后由系统释放</td></tr><tr><td align="center">程序代码区</td><td>存放函数体的二进制代码</td></tr></tbody></table><h2 id="03-与-的作用顺序"><a href="#03-与-的作用顺序" class="headerlink" title="03 ++与--的作用顺序"></a>03 <code>++</code>与<code>--</code>的作用顺序</h2><p>一般来说，<code>++a</code>表示先算<code>++</code>再算<code>a</code>，<font color=red>但是，如果表达式里出现了多次变量，如<code>++a = a + (a-1)</code>，情况就不确定了</font>。在使用<code>++</code>和<code>--</code>时需谨慎。</p><h1 id="0x01-输入专题"><a href="#0x01-输入专题" class="headerlink" title="0x01 输入专题"></a>0x01 输入专题</h1><h2 id="01-scanf"><a href="#01-scanf" class="headerlink" title="01 scanf"></a>01 scanf</h2><p>强烈推荐这篇博客，一定要去看看：<a href="https://www.cnblogs.com/yhjoker/p/7530837.html">scanf函数读取缓冲区数据的问题</a></p><ol><li><p><code>scanf(&quot; &quot;)</code>；如果双引号里面的空格可以跳过广义上的空格，等价于循环+getchar</p></li><li><p>正则表达式</p><p> <a href="https://www.cnblogs.com/orange1438/archive/2013/05/12/4544958.html">参考博客</a></p><ul><li><p><code>[]</code>内是匹配的字符。</p></li><li><p><code>^</code>表示求反集，当遇到非集合内的字符时立即终止输入。</p></li><li><p><code>%</code>表示选择，<code>%*</code> 表示跳过，其后一定要有新的<code>%</code>语句，否则无法读入。</p></li><li><p><code>%</code>,<code>%*</code>后面的是条件，比如<code>%s</code>，<code>s</code>是一个条件，表示任意字符。<code>%3s</code>又多了一个条件：只拷贝3个字符。 <code>%[a-z]</code>的条件稍微严格一些，输入的东西不但是字符，还得是一个小写字母的字符。<br> ，也就是跳过满足条件的字符，</p></li><li><p>注：<code>%[a-b 0-9]</code>能够读入空格。单个字符也可以直接写在中括号里面</p></li></ul></li><li><p><code>fgets(c, n, fp)</code> 与 <code>gets</code> 不同，第一、<code>fgets</code> 需要加最大输入长度<code>n</code>这个参量, 表示加了 <code>\0</code> 之后 <code>fgets</code> 能读入的最大长度。因此&#x3D;&#x3D;需要在读入的最末尾主动赋值为 <code>\0</code> ，不必管是否有 <code>\n</code>，这样能保证数据没有多余的 <code>\n</code>&#x3D;&#x3D;</p></li><li><p>对<strong>正文文件</strong>的<code>fscanf</code> 等函数大都和标准I&#x2F;O下的函数用法一样。除了 <code>fgets</code></p></li></ol><h2 id="02-sscanf"><a href="#02-sscanf" class="headerlink" title="02 sscanf"></a>02 sscanf</h2><p>&#x3D;&#x3D;本质上与<code>scanf</code>相同，只不过将目标字符串当作stdin&#x3D;&#x3D;</p><p>同理还有<code>sprintf</code></p><h1 id="0x02-文件专题"><a href="#0x02-文件专题" class="headerlink" title="0x02 文件专题"></a>0x02 文件专题</h1><h2 id="01-fopen"><a href="#01-fopen" class="headerlink" title="01 fopen"></a>01 fopen</h2><ol><li><p><code>fopen</code> 必须要搭配文件指针使用，如 <code>fp = fopen( , )</code> 而且得配合 <code>fscanf</code> 等等，但是在关闭文件之可以同时对文件和标准输入输出进行操作。</p></li><li><p>文件打开一定要判断是否成功。如果不成功，可以使用 <code>perror(const char *s)</code> 它可将 &#x3D;&#x3D;上一个函数(一般是各个库函数)&#x3D;&#x3D; 发生错误的原因输出到标准设备(stderr)。参数s所指的字符串会先打印出,后面再加上错误原因字符串。</p></li></ol><h2 id="02-文本方式打开与二进制方式打开"><a href="#02-文本方式打开与二进制方式打开" class="headerlink" title="02 文本方式打开与二进制方式打开"></a>02 文本方式打开与二进制方式打开</h2><p><a href="https://blog.csdn.net/dfdfdsfdfdfdf/article/details/48198565">C语言采用文本方式和二进制方式打开文件的区别分析</a></p><h3 id="i-区别"><a href="#i-区别" class="headerlink" title="i. 区别"></a>i. 区别</h3><p>数据怎么在磁盘上写不是由文件打开方式决定的，而是由写函数决定的。数据怎么从磁盘上读也不是由文件打开方式决定的，而是由读函数决定的。<br>上面说的数据怎么写是指：一种类型的变量是怎么存的？比如<code>int 12</code>，可以直接存12的二进制码(4个字节)，也可以存字符<code>‘1’</code>，字符<code>&#39;2&#39;</code>.<br>数据怎么读的是指：我要读一个int变量，是直接读sizeof(int)个字节，还是一个字符一个字符的读，直到读到的字符不是数字字符。</p><p>这对应了两种函数</p><h3 id="ii-如何读写"><a href="#ii-如何读写" class="headerlink" title="ii. 如何读写"></a>ii. 如何读写</h3><ol><li><p><code>fread</code> 以二进制的方式读入，<code>fscanf</code> 以正文方式读入。<br/> <code>fread</code> 可以直接按几个字节为单位读，而 <code>fscanf</code> 则是把文章解释为字符串然后再读。</p></li><li><p><code>fread</code> 返回值是成功读入的以size为单位长度的项数</p></li></ol><h3 id="iii-判断末尾"><a href="#iii-判断末尾" class="headerlink" title="iii. 判断末尾"></a>iii. 判断末尾</h3><p>首先说明一点，ASCII表有256个字符。</p><p><code>EOF</code>是等于-1，但是 &#x3D;&#x3D;实际上文档末尾是没有<code>EOF</code>这个玩意的。<code>EOF</code>是读入函数的返回值。&#x3D;&#x3D;<br>在以文本方式打开的文件中，返回值为<code>int</code>，不会与ASCII(char类型)冲突。故EOF有效。<br>而在以二进制打开的文件中，要想读字符，就必须得用 <code>sizeof(char)</code> ，这样不可避免地就会出现 <code>EOF</code> 与ASCII冲突。此时就得用feof来判断。</p><p><code>feof</code> ：若为末尾返回非零，若还没到就返回0。 &#x3D;&#x3D;返回非零的触发条件和 <code>fgets</code>等函数返回-1的条件相同&#x3D;&#x3D;</p><h2 id="03-fseek-和-ftell"><a href="#03-fseek-和-ftell" class="headerlink" title="03 fseek 和 ftell"></a>03 fseek 和 ftell</h2><h3 id="i-ftell"><a href="#i-ftell" class="headerlink" title="i ftell"></a>i ftell</h3><p>原型如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">ftell</span><span class="token punctuation">(</span>FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>它的返回值为<code>long</code>类型，只有一个参数为文件指针</p><h3 id="ii-fseek"><a href="#ii-fseek" class="headerlink" title="ii fseek"></a>ii fseek</h3><p>原型如下</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fseek</span> <span class="token punctuation">(</span>FILE <span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> origin <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><ol><li>它中间的那个参数是<code>long</code>类型，因此中间那个参数可以这样写：<code>22L</code>，<code>L</code>表示这个整数是<code>long</code>类型。<br/>需要注意的是，offset移动的量永远是字节数。 &#x3D;&#x3D;由于二进制文件和文本文件存储格式的区别&#x3D;&#x3D; ，需要自己手动计算偏移量</li><li>第三个参数只有三个值<code>SEEK_SET</code>表示文件开头，<code>SEEK_CUR</code>表示当前指针位置，<code>SEEK_END</code>表示文件末尾</li><li>当offset是向文件尾方向偏移的时候，&#x3D;&#x3D;无论偏移量是否超出文件尾，fseek都是返回0&#x3D;&#x3D;，当偏移量超出文件尾的时候，文件指针是指向文件尾的。并不会返回偏移出错-1值。当offset是向文件头方向偏移的时候，如果offset没有超出文件头，fseek返回值为0.&#x3D;&#x3D;当offset超出文件头时，fseek返回出错-1值，文件指针不变还是处于原来的地址。&#x3D;&#x3D;</li></ol><h2 id="04-fscanf与fgets与-n"><a href="#04-fscanf与fgets与-n" class="headerlink" title="04 fscanf与fgets与\n"></a>04 fscanf与fgets与\n</h2><p><code>fscanf</code>遇到\n和空格停止，但<code>fgets</code>会读进去。<br>建议用fgets去除\n，fgetc不一定行</p><h1 id="0x03-变量专题"><a href="#0x03-变量专题" class="headerlink" title="0x03 变量专题"></a>0x03 变量专题</h1><h2 id="01-extern"><a href="#01-extern" class="headerlink" title="01 extern"></a>01 extern</h2><p><code>extern a</code>显式的说明了<code>a</code>的存储空间是在程序的其他地方分配的，在文件中<strong>其他位置</strong>或者<strong>其他文件</strong>中寻找<code>a</code>这个变量。</p><h2 id="02-const"><a href="#02-const" class="headerlink" title="02 const"></a>02 const</h2><p>用const修饰的变量通常也叫常变量，因为这个变量有地址，有空间。只不过它的读写方式设定为了只读，这也就意味这只能通过赋初值的方式给它值。</p><table><thead><tr><th align="center"></th><th align="center">const（运行时概念）</th><th align="center">define（编译时概念）</th></tr></thead><tbody><tr><td align="center">原理</td><td align="center">常量声明</td><td align="center">字符替换</td></tr><tr><td align="center">谁来编译？</td><td align="center">编译器</td><td align="center">预编译器</td></tr><tr><td align="center">空间</td><td align="center">需要分配空间<br/>（<a href="https://blog.csdn.net/u014157109/article/details/115350923#comments_15816273">C与C++中const变量内存分配问题详解</a>)）</td><td align="center">不需要分配空间</td></tr><tr><td align="center">安全检查</td><td align="center">有类型区别，需要在编译阶段进行类型检查</td><td align="center">没有数据类型的区别，没有类型安全检查</td></tr><tr><td align="center">有无生命周期</td><td align="center">有（当前函数）</td><td align="center">无（全局）</td></tr></tbody></table><p>（注：const在C语言中与在C++中的内存分配方式不同。此处讨论C语言的情况）</p><p>&#x3D;&#x3D;const修饰的全局变量，在常量区分配内存空间，不能通过变量地址来修改值；&#x3D;&#x3D;<br>&#x3D;&#x3D;const修饰的局部变量在栈区分配内存空间，可以通过变量地址来修改值&#x3D;&#x3D;</p><h3 id="ii-与指针搭配"><a href="#ii-与指针搭配" class="headerlink" title="ii 与指针搭配"></a>ii 与指针搭配</h3><p>const的位置可以发生改变，但有可能含义就发生了变化</p><p>例如： <code>const int * p</code> 和 <code>int const * p</code>等价，表示 <code>*p</code> 不能改，<br/>&#8195;&#8195;&#8195;&#8194;而 <code>int * const p</code> 则表示 <code>p</code> 不能改。</p><p>如何记？<br> <code>*</code> 是右结合运算符，它若先和<code>p</code>结合，那<code>const</code>修饰的就是<code>*p</code>，否则<code>const</code>修饰的就是<code>p</code></p><h2 id="03-typedef"><a href="#03-typedef" class="headerlink" title="03 typedef"></a>03 typedef</h2><p><a href="https://blog.csdn.net/liitdar/article/details/80069638">typedef基本用法</a><br>在一个定义 <code>typedef &lt;字符串&gt;</code> 中， <code>&lt;字符串&gt;</code> 中会出现一个未定义的类型名 <code>Type_A</code><br>当你写：<code>Type_A object; </code> 的时候，它的含义就是：用 <code>object</code>去替换 <code>&lt;字符串&gt;</code> 中的 <code>Type_A</code> 。</p><p>例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> int_array<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>int_array object<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>实际上是：用 <code>object</code> 替换 字符串 <code>&quot;int int_array[4];&quot;</code> 中的 <code>int_array</code> 得到的结果： <code>int object[4];</code></p><p>又例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>PU<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">char</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>PU pa<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>实际上就是用 <code>pa</code> 替换 <code>void (*PU)(int a, char b);</code> 中的 <code>PU</code> 。</p><p>这也就是编译器处理tyepdef定义的原理。<br>&#x3D;&#x3D;typedef可以看作是定义了一个新的类型，这个类型在解释的时候按照以上规则定义变量。&#x3D;&#x3D;</p><p>typedef与结构体搭配也可以用上面的理论解释：</p><table><thead><tr><th>使用typedef关键字定义结构体类型</th><th>定义结构体类型的同时定义结构体类型变量</th></tr></thead><tbody><tr><td>typedef struct student<br/>{<br/>&#8195;int age;<br/>&#8195;int height;<br/>}std;<br/>&#x2F;&#x2F; <strong>std相当于struct student</strong></td><td>struct student<br/>{<br/>&#8195;int age;<br/>&#8195;int height;<br/>}std1,std2;<br/>&#x2F;&#x2F;<strong>定义了student数据类型的结构体和std1、<br/>std2结构体变量</strong></td></tr></tbody></table><h2 id="04-char有符号位"><a href="#04-char有符号位" class="headerlink" title="04 char有符号位"></a>04 char有符号位</h2><p>在x86平台上，默认有符号，但在arm平台上默认没符号。<br>保险起见，用 <code>signed char</code></p><h2 id="05-enum-枚举常量"><a href="#05-enum-枚举常量" class="headerlink" title="05 enum(枚举常量)"></a>05 enum(枚举常量)</h2><p>定义类似于结构体<br>相当于一次性定义多个常量。<br>&#x3D;&#x3D;用它定义变量没用&#x3D;&#x3D;</p><h2 id="06-可变数组长度"><a href="#06-可变数组长度" class="headerlink" title="06 可变数组长度"></a>06 可变数组长度</h2><p>老师可能讲的是在C语言中不能用变量作为数组的长度，但实际上， &#x3D;&#x3D;哪怕是c89的标准，在满足一定条件时也是能够用变量作为数组长度的。&#x3D;&#x3D; </p><p>例如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">char</span> a<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>在语法上是没有问题的。</p><p>尽管如此，我本人还是不推荐使用这种写法。</p><ol><li>这样写无法在定义的时候初始化。<code>char a[len] = {0}</code>就是错的。</li><li>这样写只能作为局部变量，如果定义为全局变量就有问题。</li></ol><h1 id="0x04-指针专题"><a href="#0x04-指针专题" class="headerlink" title="0x04 指针专题"></a>0x04 指针专题</h1><h2 id="01-小知识点"><a href="#01-小知识点" class="headerlink" title="01  小知识点"></a>01  小知识点</h2><ol><li><p>字符串常量有返回值，其返回值为首字母的地址</p></li><li><p>数组名，是指向它的第一个一级成员的指针<br/>数组名取地址，是指向整个数组的指针</p></li></ol><h2 id="02-表述-p-1-与-p-1-等价"><a href="#02-表述-p-1-与-p-1-等价" class="headerlink" title="02 表述 *(p + 1) 与 p[1] 等价"></a>02 表述 <code>*(p + 1)</code> 与 <code>p[1]</code> 等价</h2><p>本质是因为 <code>[]</code> 是下标运算符。 <code>x[y]</code> 等价于 <code>*((x) + (y))</code></p><h2 id="03-函数指针"><a href="#03-函数指针" class="headerlink" title="03 函数指针"></a>03 函数指针</h2><p>为方便起见，C语言中可以将函数指针直接按函数调用的方式使用。比如<code>func(u,v)</code> 与<code>(*func)(u,v)</code> 等价</p><p>最常见的例子：qsort里面的cmp函数。cmp函数的名字是你自己定的，qsort在用你写的cmp的时候先给它一个别名。<br>这个过程就是函数A的地址通过一个函数指针的形参传递到另一个函数B内部，从而能够在内部调用。只要函数A格式与B里面的形参一样，A名字可以任何。<br>大大增加了程序的扩展性。</p><h2 id="04-二维数组与二重指针"><a href="#04-二维数组与二重指针" class="headerlink" title="04 二维数组与二重指针"></a>04 二维数组与二重指针</h2><p><a href="https://blog.csdn.net/u013684730/article/details/46565577">见此博客</a><br>具体原因是两者在内存中的分配不完全一样，二重指针更加分散一些<br>所以 <code>char **p</code> 和 <code>char p[2][3]</code> 之间不能相互传递参数</p><h2 id="05-文件位置指针"><a href="#05-文件位置指针" class="headerlink" title="05 文件位置指针"></a>05 文件位置指针</h2><p>对文本文件的读写也是指针实现的。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    FILE <span class="token operator">*</span>fp<span class="token punctuation">,</span> <span class="token operator">*</span>dd<span class="token punctuation">;</span>    <span class="token keyword">char</span> x<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">fpos_t</span> pos<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">int</span> pos2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token punctuation">;</span>        fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"in.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//puts("fd");</span>    dd <span class="token operator">=</span> fp<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">feof</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token function">fgetpos</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pos<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fgets</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//pos2 = ftell(fp);</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pos[%d]=%ld"</span><span class="token punctuation">,</span>top<span class="token punctuation">,</span> pos<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//printf("pos2=%d\n", pos2);</span>    <span class="token comment">//fseek(dd, pos2, SEEK_SET);</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> top<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token function">fsetpos</span><span class="token punctuation">(</span>dd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pos<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fgets</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d:"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="0x05-结构体专题"><a href="#0x05-结构体专题" class="headerlink" title="0x05 结构体专题"></a>0x05 结构体专题</h1><h2 id="结构体大小-sizeof"><a href="#结构体大小-sizeof" class="headerlink" title="结构体大小(sizeof)"></a>结构体大小(sizeof)</h2><p><a href="https://www.cnblogs.com/qiumingcheng/p/11370836.html">sizeof计算结构体大小</a></p><p>没有成员的结构体占用的空间是1个字节。</p><p>偏移量</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">stru</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> a<span class="token punctuation">;</span>  <span class="token comment">//start address is 0</span><span class="token keyword">char</span> b<span class="token punctuation">;</span>  <span class="token comment">//start address is 4</span><span class="token keyword">int</span> c<span class="token punctuation">;</span>  <span class="token comment">//start address is 8</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>偏移量指的是结构体变量中成员的地址和结构体变量地址的差。结构体大小等于最后一个成员的偏移量加上最后一个成员的大小。显然，结构体变量中第一个成员的地址就是结构体变量的首地址。</p><p>比如上面的结构体，第一个成员<code>a</code>的偏移量为0。第二个成员<code>b</code>的偏移量是第一个成员的偏移量加上第一个成员的大小（0+4）,其值为4；第三个成员<code>c</code>的偏移量是第二个成员的偏移量应该是加上第二个成员的大小（4+1）。</p><p>但在实际中，存储变量时地址要求对齐，编译器在编译程序时会遵循两条原则：<br>（1）结构体变量中成员的偏移量必须是成员大小的整数倍（0被认为是任何数的整数倍）<br>（2）结构体大小必须是所有成员大小的整数倍，也即所有成员大小的公倍数。</p><h1 id="0x06-函数专题"><a href="#0x06-函数专题" class="headerlink" title="0x06 函数专题"></a>0x06 函数专题</h1><h2 id="01-qsort"><a href="#01-qsort" class="headerlink" title="01 qsort"></a>01 qsort</h2><p>第一个参数是地址，注意首项零的情况<br>第二个参数是个数<br>qsort在调用外部判断函数的时候，传入的参数是 &#x3D;&#x3D;数组元素的地址！&#x3D;&#x3D; 。在自己写cmp函数的时候尤其要注意。<br>另外，指针在C语言中 &#x3D;&#x3D;指向的是被指元素的首地址&#x3D;&#x3D; </p><p><img src="https://s4.ax1x.com/2021/12/21/TMQs6f.png" alt="示意图b"></p><p>&#x3D;&#x3D;qsort默认从小到大排序，若cmp返回值大于0则交换，小于等于0不管。通常直接写<code>return a - b;</code>&#x3D;&#x3D;</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">一维的数组排序<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token function">qsort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>comp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">comp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>字符数组排序<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">qsort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">,</span>comp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">comp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>结构体排序<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">str</span><span class="token punctuation">&#123;</span>   <span class="token keyword">char</span> str1<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token keyword">char</span> str2<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>str<span class="token punctuation">;</span>str <span class="token operator">*</span>strs<span class="token punctuation">;</span>strs<span class="token operator">=</span><span class="token punctuation">(</span>str <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token operator">-></span>str2<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">(</span>str<span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token operator">-></span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">qsort</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="02-strlen"><a href="#02-strlen" class="headerlink" title="02 strlen()"></a>02 strlen()</h2><p>返回值为无符号整形<code>unsigned int</code>。故如果参与减法运算会产生负数，需要强制类型转换</p><h2 id="03-内存分配函数"><a href="#03-内存分配函数" class="headerlink" title="03 内存分配函数"></a>03 内存分配函数</h2><h3 id="i-malloc"><a href="#i-malloc" class="headerlink" title="i malloc()"></a>i malloc()</h3><table><thead><tr><th align="center">功能</th><th align="left">申请堆内存</th></tr></thead><tbody><tr><td align="center">所需头文件</td><td align="left">#include&lt;stdlib.h&gt;</td></tr><tr><td align="center">函数原型</td><td align="left">void *malloc(size_t,size);</td></tr><tr><td align="center">参数(size)</td><td align="left">所申请的一块堆内存的大小，单位是字节</td></tr><tr><td align="center">返回值</td><td align="left">成功 - 指向分配好的堆内存的指针</br>失败 - NULL</td></tr><tr><td align="center">malloc()分配给定大小（以字节为单位）的内存块，并返回一个指向块开头的指针。malloc()不会初始化分配的内存。如果在初始化之前我们尝试访问内存块的内容，那么我们将得到分段错误（或者可能是垃圾值）。</td><td align="left"></td></tr></tbody></table><h3 id="ii-calloc"><a href="#ii-calloc" class="headerlink" title="ii calloc()"></a>ii calloc()</h3><table><thead><tr><th align="center">功能</th><th>申请堆内存</th></tr></thead><tbody><tr><td align="center">所需头文件</td><td>#include&lt;stdlib.h&gt;</td></tr><tr><td align="center">函数原型</td><td>void *calloc(size_t count,size_t size);</td></tr><tr><td align="center">参数(count与size)</td><td>size —- 所申请的一块堆内存的大小，单位是字节</br>count —- 所申请的堆内存的块数，所有的内存块是连续分布的，无间隔的</td></tr><tr><td align="center">返回值</td><td>成功 - 指向分配好的堆内存的指针</br>失败 - NULL</td></tr><tr><td align="center">calloc()分配内存并将分配的内存块初始化为零。如果我们尝试访问这些块的内容，那么我们将得到 0。</td><td></td></tr></tbody></table><h1 id="0x07-宏定义专题（待整理）"><a href="#0x07-宏定义专题（待整理）" class="headerlink" title="0x07 宏定义专题（待整理）"></a>0x07 宏定义专题（待整理）</h1><p><a href="https://blog.csdn.net/yanggangclcsdn/article/details/49704089">宏定义详解</a></p>]]></content>
    
    
    <categories>
      
      <category>article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
